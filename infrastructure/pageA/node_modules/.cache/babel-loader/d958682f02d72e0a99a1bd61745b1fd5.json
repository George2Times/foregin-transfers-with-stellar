{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/azureuser/foregin-transfers-with-stellar/infrastructure/pageA/src/App.js\";\nimport React, { Component } from 'react';\nimport StellarSdk from 'stellar-sdk';\nimport Nav from './Components/Nav';\nimport Description from './Components/Description';\nimport Container from './Components/Container';\nimport assets from './Assets/Assets';\n\nvar toml = require('toml');\n\nvar concat = require('concat-stream');\n\nvar fs = require('fs');\n\nconst requestObj = require('request');\n\nconst DBServer = 'localhost:3602';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.setAccount = () => {\n      var account = this.state.fields.friendlyid;\n      console.log(\"account\", account);\n      let app = this;\n      var url = 'http://' + DBServer + '/userdet';\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          friendlyid: account\n        })\n      }).then(function (response, error) {\n        if (response) {\n          return response.json();\n        } else {\n          console.log(error);\n        }\n      }).then(function (data) {\n        app.setState({\n          account,\n          name: data.name,\n          balance: data.balance\n        });\n      });\n    };\n\n    this.payment = () => {\n      console.log(this.state.fields.receiver);\n      console.log(this.state.fields.amount);\n      console.log(this.state.account);\n      let app = this;\n      var url = 'http://' + DBServer + '/payment';\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          receiver: this.state.fields.receiver,\n          amount: this.state.fields.amount,\n          account: this.state.account\n        })\n      }).then(function (response, error) {\n        if (response) {\n          return response.json();\n        } else {\n          console.log(error);\n        }\n      }).then(function (data) {\n        console.log(data);\n\n        if (data.msg == \"SUCCESS!\") {\n          console.log(\"Tx hash\", data.result);\n          var disObj = JSON.parse(data.result);\n          app.setState({\n            txstatus: 'Transaction Successful',\n            txid: disObj.hash\n          });\n          app.setBalance();\n        } else {\n          console.log(\"Error\", data);\n          app.setState({\n            txstatus: 'Transaction Failed'\n          });\n        }\n      });\n    };\n\n    this.setBank = () => {\n      let app = this;\n      var url = 'http://' + DBServer + '/bankuser';\n      fetch(url).then(function (response, error) {\n        if (response) {\n          return response.json();\n        } else {\n          console.log(error);\n        }\n      }).then(function (data) {\n        app.setState({\n          receivedtx: data.tx\n        });\n        console.log(app.state.receivedtx);\n      });\n    };\n\n    this.setBalance = () => {\n      let app = this;\n      var account = this.state.account;\n      console.log(\"Reached here\");\n      var url = 'http://' + DBServer + '/userbal';\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          friendlyid: account\n        })\n      }).then(function (response, error) {\n        if (response) {\n          return response.json();\n        } else {\n          console.log(error);\n        }\n      }).then(function (data) {\n        app.setState({\n          balance: data.balance\n        });\n      });\n    };\n\n    this.onInputChangeUpdateField = (name, value) => {\n      let fields = this.state.fields;\n      fields[name] = value;\n      this.setState({\n        fields\n      });\n    };\n\n    this.appName = 'PageA';\n    this.onInputChangeUpdateField = this.onInputChangeUpdateField.bind(this);\n    this.assets = assets;\n    this.USD = new StellarSdk.Asset(this.assets[0].code, this.assets[0].issuer); // this.GBP = new StellarSdk.Asset(this.assets[1].code,this.assets[1].issuer);\n    // this.EUR = new StellarSdk.Asset(this.assets[2].code,this.assets[2].issuer);\n\n    this.state = {\n      network: 'Private Testnet',\n      account: null,\n      balance: 0,\n      name: '',\n      fields: {\n        friendlyid: null,\n        receiver: null,\n        amount: null,\n        sellprice: null,\n        sellamount: null\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.server = new StellarSdk.Server('http://127.0.0.1:8000', {\n      allowHttp: true\n    });\n    this.passphrase = 'Standalone Network ; February 2017';\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Nav, {\n        appName: this.appName,\n        network: this.state.network\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Description, {\n        name: this.state.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        onInputChangeUpdateField: this.onInputChangeUpdateField,\n        account: this.state.account,\n        balance: this.state.balance,\n        payment: this.payment,\n        setBank: this.setBank,\n        receivedtx: this.state.receivedtx,\n        chkaddr: this.chkaddr,\n        setBalance: this.setBalance,\n        fields: this.state.fields,\n        setAccount: this.setAccount,\n        txstatus: this.state.txstatus,\n        txid: this.state.txid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 21\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/azureuser/foregin-transfers-with-stellar/infrastructure/pageA/src/App.js"],"names":["React","Component","StellarSdk","Nav","Description","Container","assets","toml","require","concat","fs","requestObj","DBServer","App","constructor","setAccount","account","state","fields","friendlyid","console","log","app","url","fetch","method","headers","body","JSON","stringify","then","response","error","json","data","setState","name","balance","payment","receiver","amount","msg","result","disObj","parse","txstatus","txid","hash","setBalance","setBank","receivedtx","tx","onInputChangeUpdateField","value","appName","bind","USD","Asset","code","issuer","network","sellprice","sellamount","componentDidMount","server","Server","allowHttp","passphrase","render","chkaddr"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport StellarSdk from 'stellar-sdk';\nimport Nav from './Components/Nav';\nimport Description from './Components/Description';\nimport Container from './Components/Container';\nimport assets from './Assets/Assets';\nvar toml = require('toml');\nvar concat = require('concat-stream');\nvar fs = require('fs');\nconst requestObj = require('request');\nconst DBServer = 'localhost:3602';\n\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.appName = 'PageA';\n\t\tthis.onInputChangeUpdateField = this.onInputChangeUpdateField.bind(this);\n        this.assets = assets;\n\t\tthis.USD = new StellarSdk.Asset(this.assets[0].code,this.assets[0].issuer);\n\t\t// this.GBP = new StellarSdk.Asset(this.assets[1].code,this.assets[1].issuer);\n\t\t// this.EUR = new StellarSdk.Asset(this.assets[2].code,this.assets[2].issuer);\n\t\t\n\t\tthis.state = {\n            \t\n            network: 'Private Testnet',\n            account: null,\n\t\t\tbalance: 0,\n\t\t\tname: '',\n\t\t\t\n\n\t\t\t     fields: {\n\t\t\t\tfriendlyid: null,\t \n\t\t\t\treceiver: null,\n                amount: null,\n\t\t\t\tsellprice: null,\n                sellamount: null,\n\t\t\t\t            }\n\t\t}\n            \n       \n\t\t}\n\t\t\n  \n  \n\n\n\nsetAccount = () => {\n        \n\tvar account = this.state.fields.friendlyid;\n\tconsole.log(\"account\",account);\n\tlet app = this;\n\tvar url = 'http://'+ DBServer +'/userdet'; \n\t\n\tfetch(url,{\n\tmethod: 'POST',\n\theaders: {\n\t\t'Accept': 'application/json',\n\t\t'Content-Type':'application/json',\n\t},\n\tbody: JSON.stringify({\n\t\t\t\t\t\t\tfriendlyid: account\n\t\t\t\t\t\t})\n\t}).then(function(response,error){\n\t\tif(response)\n\t\t{\n\t\t\treturn response.json();\n\t\t}\n\t\telse \n\t\t{\n\t\t\tconsole.log(error);\n\t\t}\n\t}).then(function(data){\n\t\n        app.setState({\n            account,\n\t\t\tname: data.name,\n\t\t\tbalance: data.balance\n        });\n\t})\n}\n    \n\n\t    \n\n\npayment = () => {\n\t\n\tconsole.log(this.state.fields.receiver);\n\tconsole.log(this.state.fields.amount);\n\t\n\tconsole.log(this.state.account);\n\tlet app =this;\n\tvar url = 'http://'+DBServer+'/payment'; \n\t\n\tfetch(url,{\n\tmethod: 'POST',\n\theaders: {\n\t\t'Accept': 'application/json',\n\t\t'Content-Type':'application/json',\n\t},\t\n\tbody: JSON.stringify({\n\t\t\t\t\t\t\treceiver: this.state.fields.receiver,\n\t\t\t\t\t\t\tamount: this.state.fields.amount,\n\t\t\t\t\t\t\taccount: this.state.account\n\t\t\t\t\t\t})\n\t}).then(function(response,error){\n\t\tif(response)\n\t\t{\n\t\t\treturn response.json();\n\t\t}\n\t\telse \n\t\t{\n\t\t\tconsole.log(error);\n\t\t}\n\t}).then(function(data){\n\tconsole.log(data);\n\tif(data.msg == \"SUCCESS!\")\n\t{\n\tconsole.log(\"Tx hash\",data.result);\n\tvar disObj = JSON.parse(data.result);\t\n\tapp.setState({\n\t\t\ttxstatus: 'Transaction Successful',\n\t\t\ttxid: disObj.hash\t\n        });\t\n\tapp.setBalance();\t\t\n\t}\n\telse\n\t{\n\tconsole.log(\"Error\",data);\n\tapp.setState({\n\t\t\ttxstatus: 'Transaction Failed',\n        });\t\n\t}\n\t\t\n});\n}\n\n\nsetBank = () => {\n\n\tlet app = this;\n\tvar url = 'http://'+ DBServer +'/bankuser';\nfetch(url).then(function(response,error){\n\t\tif(response)\n\t\t{\n\t\t\treturn response.json();\n\t\t}\n\t\telse \n\t\t{\n\t\t\tconsole.log(error);\n\t\t}\n\t}).then(function(data){\n\t\n        app.setState({\n\t\t\treceivedtx: data.tx\n\t\t\t\n        });\n\t\n\tconsole.log(app.state.receivedtx);\n\t\t\n\t})\n\n}\n\nsetBalance = () => {\n\tlet app=this;\nvar account = this.state.account;\n\tconsole.log(\"Reached here\");\n\tvar url = 'http://'+ DBServer +'/userbal';\n\tfetch(url,{\n\tmethod: 'POST',\n\theaders: {\n\t\t'Accept': 'application/json',\n\t\t'Content-Type':'application/json',\n\t},\t\n\tbody: JSON.stringify({\n\t\t\t\t\t\t\tfriendlyid: account\n\t\t\t\t\t\t})\n\t}).then(function(response,error){\n\t\tif(response)\n\t\t{\n\t\t\treturn response.json();\n\t\t}\n\t\telse \n\t\t{\n\t\t\tconsole.log(error);\n\t\t}\n\t}).then(function(data){\n\t\n        app.setState({\n\t\t\tbalance: data.balance\n        });\n\t})\t\n}\n\n\n\nonInputChangeUpdateField = (name,value) => {\n        let fields = this.state.fields;\n\n        fields[name] = value;\n\n        this.setState({\n            fields\n        });\n    };\n\n    componentDidMount(){\n\t\t\n\t\tthis.server = new StellarSdk.Server('http://127.0.0.1:8000', {allowHttp: true});\n\t\tthis.passphrase = 'Standalone Network ; February 2017';\n\t\t\n\t\t\n\t}\n\t\t\t\t\t\t\t   \n\t\t\n\t\t \n\t\t\t\t\t\t   \n\t\t\t\t\t\t   \n    render() {\n        \n       \n                return (\n                    <div>\n                        <Nav appName={this.appName} network={this.state.network} />\n                        <Description name={this.state.name}/>\n                        <Container onInputChangeUpdateField={this.onInputChangeUpdateField}\n                                   account={this.state.account}\n\t\t\t\t\t\t\t\t   balance={this.state.balance}\n\t\t\t\t\t\t\t\t   payment={this.payment}\n\t\t\t\t\t\t\t\t   setBank={this.setBank}\n\t\t\t\t\t\t\t\t   receivedtx = {this.state.receivedtx}\n\t\t\t\t\t\t\t\t  chkaddr={this.chkaddr}\n\t\t\t\t\t\t\t\t   setBalance={this.setBalance} \t\n\t\t\t\t\t\t\t\t   fields={this.state.fields}\n\t\t\t\t\t\t\t\t   setAccount={this.setAccount}\n\t\t\t\t\t\t\t\t   txstatus={this.state.txstatus}\n\t\t\t\t\t               txid={this.state.txid}/>\n\t\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t\t                       </div>\n                )\n            \n    }\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}