{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/azureuser/foregin-transfers-with-stellar/infrastructure/pageA/src/App.js\";\nimport React, { Component } from 'react';\nimport StellarSdk from 'stellar-sdk';\nimport Nav from './Components/Nav';\nimport Description from './Components/Description';\nimport Container from './Components/Container';\nimport assets from './Assets/Assets';\n\nvar toml = require('toml');\n\nvar concat = require('concat-stream');\n\nvar fs = require('fs');\n\nconst requestObj = require('request');\n\nconst DBServer = '20.56.32.165:3600';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.setAccount = () => {\n      var account = this.state.fields.friendlyid;\n      console.log(\"account\", account);\n      let app = this;\n      var url = 'http://' + DBServer + '/userdet';\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          friendlyid: account\n        })\n      }).then(function (response, error) {\n        if (response) {\n          return response.json();\n        } else {\n          console.log(error);\n        }\n      }).then(function (data) {\n        app.setState({\n          account,\n          name: data.name,\n          balance: data.balance\n        });\n      });\n    };\n\n    this.payment = () => {\n      console.log(this.state.fields.receiver);\n      console.log(this.state.fields.amount);\n      console.log(this.state.account);\n      let app = this;\n      var url = 'http://' + DBServer + '/payment';\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          receiver: this.state.fields.receiver,\n          amount: this.state.fields.amount,\n          account: this.state.account\n        })\n      }).then(function (response, error) {\n        if (response) {\n          return response.json();\n        } else {\n          console.log(error);\n        }\n      }).then(function (data) {\n        console.log(data);\n\n        if (data.msg == \"SUCCESS!\") {\n          console.log(\"Tx hash\", data.result);\n          var disObj = JSON.parse(data.result);\n          app.setState({\n            txstatus: 'Transaction Successful',\n            txid: disObj.hash\n          });\n          app.setBalance();\n        } else {\n          console.log(\"Error\", data);\n          app.setState({\n            txstatus: 'Transaction Failed'\n          });\n        }\n      });\n    };\n\n    this.setBank = () => {\n      let app = this;\n      var url = 'http://' + DBServer + '/bankuser';\n      fetch(url).then(function (response, error) {\n        if (response) {\n          return response.json();\n        } else {\n          console.log(error);\n        }\n      }).then(function (data) {\n        app.setState({\n          receivedtx: data.tx\n        });\n        console.log(app.state.receivedtx);\n      });\n    };\n\n    this.setBalance = () => {\n      let app = this;\n      var account = this.state.account;\n      console.log(\"Reached here\");\n      var url = 'http://' + DBServer + '/userbal';\n      fetch(url, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          friendlyid: account\n        })\n      }).then(function (response, error) {\n        if (response) {\n          return response.json();\n        } else {\n          console.log(error);\n        }\n      }).then(function (data) {\n        app.setState({\n          balance: data.balance\n        });\n      });\n    };\n\n    this.onInputChangeUpdateField = (name, value) => {\n      let fields = this.state.fields;\n      fields[name] = value;\n      this.setState({\n        fields\n      });\n    };\n\n    this.appName = 'PageA';\n    this.onInputChangeUpdateField = this.onInputChangeUpdateField.bind(this);\n    this.assets = assets;\n    this.USD = new StellarSdk.Asset(this.assets[0].code, this.assets[0].issuer); // this.GBP = new StellarSdk.Asset(this.assets[1].code,this.assets[1].issuer);\n    // this.EUR = new StellarSdk.Asset(this.assets[2].code,this.assets[2].issuer);\n\n    this.state = {\n      network: 'Private Testnet',\n      account: null,\n      balance: 0,\n      name: '',\n      fields: {\n        friendlyid: null,\n        receiver: null,\n        amount: null,\n        sellprice: null,\n        sellamount: null\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.server = new StellarSdk.Server('http://127.0.0.1:8000', {\n      allowHttp: true\n    });\n    this.passphrase = 'Standalone Network ; February 2017';\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Nav, {\n        appName: this.appName,\n        network: this.state.network\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Description, {\n        name: this.state.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        onInputChangeUpdateField: this.onInputChangeUpdateField,\n        account: this.state.account,\n        balance: this.state.balance,\n        payment: this.payment,\n        setBank: this.setBank,\n        receivedtx: this.state.receivedtx,\n        chkaddr: this.chkaddr,\n        setBalance: this.setBalance,\n        fields: this.state.fields,\n        setAccount: this.setAccount,\n        txstatus: this.state.txstatus,\n        txid: this.state.txid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/azureuser/foregin-transfers-with-stellar/infrastructure/pageA/src/App.js"],"names":["React","Component","StellarSdk","Nav","Description","Container","assets","toml","require","concat","fs","requestObj","DBServer","App","constructor","setAccount","account","state","fields","friendlyid","console","log","app","url","fetch","method","headers","body","JSON","stringify","then","response","error","json","data","setState","name","balance","payment","receiver","amount","msg","result","disObj","parse","txstatus","txid","hash","setBalance","setBank","receivedtx","tx","onInputChangeUpdateField","value","appName","bind","USD","Asset","code","issuer","network","sellprice","sellamount","componentDidMount","server","Server","allowHttp","passphrase","render","chkaddr"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport StellarSdk from 'stellar-sdk';\nimport Nav from './Components/Nav';\nimport Description from './Components/Description';\nimport Container from './Components/Container';\nimport assets from './Assets/Assets';\nvar toml = require('toml');\nvar concat = require('concat-stream');\nvar fs = require('fs');\nconst requestObj = require('request');\nconst DBServer = '20.56.32.165:3600';\n\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.appName = 'PageA';\n\t\tthis.onInputChangeUpdateField = this.onInputChangeUpdateField.bind(this);\n\t\tthis.assets = assets;\n\t\tthis.USD = new StellarSdk.Asset(this.assets[0].code, this.assets[0].issuer);\n\t\t// this.GBP = new StellarSdk.Asset(this.assets[1].code,this.assets[1].issuer);\n\t\t// this.EUR = new StellarSdk.Asset(this.assets[2].code,this.assets[2].issuer);\n\n\t\tthis.state = {\n\n\t\t\tnetwork: 'Private Testnet',\n\t\t\taccount: null,\n\t\t\tbalance: 0,\n\t\t\tname: '',\n\n\n\t\t\tfields: {\n\t\t\t\tfriendlyid: null,\n\t\t\t\treceiver: null,\n\t\t\t\tamount: null,\n\t\t\t\tsellprice: null,\n\t\t\t\tsellamount: null,\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\tsetAccount = () => {\n\n\t\tvar account = this.state.fields.friendlyid;\n\t\tconsole.log(\"account\", account);\n\t\tlet app = this;\n\t\tvar url = 'http://' + DBServer + '/userdet';\n\n\t\tfetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tfriendlyid: account\n\t\t\t})\n\t\t}).then(function (response, error) {\n\t\t\tif (response) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}).then(function (data) {\n\n\t\t\tapp.setState({\n\t\t\t\taccount,\n\t\t\t\tname: data.name,\n\t\t\t\tbalance: data.balance\n\t\t\t});\n\t\t})\n\t}\n\n\n\n\n\n\tpayment = () => {\n\n\t\tconsole.log(this.state.fields.receiver);\n\t\tconsole.log(this.state.fields.amount);\n\n\t\tconsole.log(this.state.account);\n\t\tlet app = this;\n\t\tvar url = 'http://' + DBServer + '/payment';\n\n\t\tfetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\treceiver: this.state.fields.receiver,\n\t\t\t\tamount: this.state.fields.amount,\n\t\t\t\taccount: this.state.account\n\t\t\t})\n\t\t}).then(function (response, error) {\n\t\t\tif (response) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}).then(function (data) {\n\t\t\tconsole.log(data);\n\t\t\tif (data.msg == \"SUCCESS!\") {\n\t\t\t\tconsole.log(\"Tx hash\", data.result);\n\t\t\t\tvar disObj = JSON.parse(data.result);\n\t\t\t\tapp.setState({\n\t\t\t\t\ttxstatus: 'Transaction Successful',\n\t\t\t\t\ttxid: disObj.hash\n\t\t\t\t});\n\t\t\t\tapp.setBalance();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"Error\", data);\n\t\t\t\tapp.setState({\n\t\t\t\t\ttxstatus: 'Transaction Failed',\n\t\t\t\t});\n\t\t\t}\n\n\t\t});\n\t}\n\n\n\tsetBank = () => {\n\n\t\tlet app = this;\n\t\tvar url = 'http://' + DBServer + '/bankuser';\n\t\tfetch(url).then(function (response, error) {\n\t\t\tif (response) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}).then(function (data) {\n\n\t\t\tapp.setState({\n\t\t\t\treceivedtx: data.tx\n\n\t\t\t});\n\n\t\t\tconsole.log(app.state.receivedtx);\n\n\t\t})\n\n\t}\n\n\tsetBalance = () => {\n\t\tlet app = this;\n\t\tvar account = this.state.account;\n\t\tconsole.log(\"Reached here\");\n\t\tvar url = 'http://' + DBServer + '/userbal';\n\t\tfetch(url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tbody: JSON.stringify({\n\t\t\t\tfriendlyid: account\n\t\t\t})\n\t\t}).then(function (response, error) {\n\t\t\tif (response) {\n\t\t\t\treturn response.json();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(error);\n\t\t\t}\n\t\t}).then(function (data) {\n\n\t\t\tapp.setState({\n\t\t\t\tbalance: data.balance\n\t\t\t});\n\t\t})\n\t}\n\n\n\n\tonInputChangeUpdateField = (name, value) => {\n\t\tlet fields = this.state.fields;\n\n\t\tfields[name] = value;\n\n\t\tthis.setState({\n\t\t\tfields\n\t\t});\n\t};\n\n\tcomponentDidMount() {\n\n\t\tthis.server = new StellarSdk.Server('http://127.0.0.1:8000', { allowHttp: true });\n\t\tthis.passphrase = 'Standalone Network ; February 2017';\n\n\n\t}\n\n\n\n\n\n\trender() {\n\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Nav appName={this.appName} network={this.state.network} />\n\t\t\t\t<Description name={this.state.name} />\n\t\t\t\t<Container onInputChangeUpdateField={this.onInputChangeUpdateField}\n\t\t\t\t\taccount={this.state.account}\n\t\t\t\t\tbalance={this.state.balance}\n\t\t\t\t\tpayment={this.payment}\n\t\t\t\t\tsetBank={this.setBank}\n\t\t\t\t\treceivedtx={this.state.receivedtx}\n\t\t\t\t\tchkaddr={this.chkaddr}\n\t\t\t\t\tsetBalance={this.setBalance}\n\t\t\t\t\tfields={this.state.fields}\n\t\t\t\t\tsetAccount={this.setAccount}\n\t\t\t\t\ttxstatus={this.state.txstatus}\n\t\t\t\t\ttxid={this.state.txid} />\n\n\t\t\t</div>\n\t\t)\n\n\t}\n}\nexport default App;\n"]},"metadata":{},"sourceType":"module"}