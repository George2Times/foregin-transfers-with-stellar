{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.payment = payment;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Create a payment operation.\n * @function\n * @alias Operation.payment\n * @param {object} opts Options object\n * @param {string} opts.destination - The destination account ID.\n * @param {Asset} opts.asset - The asset to send.\n * @param {string} opts.amount - The amount to send.\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.PaymentOp} Payment operation\n */\n\n\nfunction payment(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.destination)) {\n    throw new Error('destination is invalid');\n  }\n\n  if (!opts.asset) {\n    throw new Error('Must provide an asset for a payment operation');\n  }\n\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n\n  var attributes = {};\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  var paymentOp = new _stellarXdr_generated2.default.PaymentOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.payment(paymentOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"sources":["/home/azureuser/foregin-transfers-with-stellar/infrastructure/pageA/node_modules/stellar-base/lib/operations/payment.js"],"names":["Object","defineProperty","exports","value","payment","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_keypair","_strkey","obj","__esModule","default","opts","StrKey","isValidEd25519PublicKey","destination","Error","asset","isValidAmount","amount","TypeError","constructAmountRequirementsError","attributes","Keypair","fromPublicKey","xdrAccountId","toXDRObject","_toXDRAmount","paymentOp","PaymentOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;;AAEA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,oCAAD,CAAnC;;AAEA,IAAIC,sBAAsB,GAAGC,sBAAsB,CAACH,qBAAD,CAAnD;;AAEA,IAAII,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAII,OAAO,GAAGJ,OAAO,CAAC,WAAD,CAArB;;AAEA,SAASE,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,OAAT,CAAiBU,IAAjB,EAAuB;AACrB,MAAI,CAACJ,OAAO,CAACK,MAAR,CAAeC,uBAAf,CAAuCF,IAAI,CAACG,WAA5C,CAAL,EAA+D;AAC7D,UAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAI,CAACJ,IAAI,CAACK,KAAV,EAAiB;AACf,UAAM,IAAID,KAAJ,CAAU,+CAAV,CAAN;AACD;;AACD,MAAI,CAAC,KAAKE,aAAL,CAAmBN,IAAI,CAACO,MAAxB,CAAL,EAAsC;AACpC,UAAM,IAAIC,SAAJ,CAAc,KAAKC,gCAAL,CAAsC,QAAtC,CAAd,CAAN;AACD;;AAED,MAAIC,UAAU,GAAG,EAAjB;AACAA,EAAAA,UAAU,CAACP,WAAX,GAAyBR,QAAQ,CAACgB,OAAT,CAAiBC,aAAjB,CAA+BZ,IAAI,CAACG,WAApC,EAAiDU,YAAjD,EAAzB;AACAH,EAAAA,UAAU,CAACL,KAAX,GAAmBL,IAAI,CAACK,KAAL,CAAWS,WAAX,EAAnB;AACAJ,EAAAA,UAAU,CAACH,MAAX,GAAoB,KAAKQ,YAAL,CAAkBf,IAAI,CAACO,MAAvB,CAApB;AACA,MAAIS,SAAS,GAAG,IAAIvB,sBAAsB,CAACM,OAAvB,CAA+BkB,SAAnC,CAA6CP,UAA7C,CAAhB;AAEA,MAAIQ,YAAY,GAAG,EAAnB;AACAA,EAAAA,YAAY,CAACC,IAAb,GAAoB1B,sBAAsB,CAACM,OAAvB,CAA+BqB,aAA/B,CAA6C9B,OAA7C,CAAqD0B,SAArD,CAApB;AACA,OAAKK,gBAAL,CAAsBH,YAAtB,EAAoClB,IAApC;AAEA,SAAO,IAAIP,sBAAsB,CAACM,OAAvB,CAA+BuB,SAAnC,CAA6CJ,YAA7C,CAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.payment = payment;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create a payment operation.\n * @function\n * @alias Operation.payment\n * @param {object} opts Options object\n * @param {string} opts.destination - The destination account ID.\n * @param {Asset} opts.asset - The asset to send.\n * @param {string} opts.amount - The amount to send.\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.PaymentOp} Payment operation\n */\nfunction payment(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.destination)) {\n    throw new Error('destination is invalid');\n  }\n  if (!opts.asset) {\n    throw new Error('Must provide an asset for a payment operation');\n  }\n  if (!this.isValidAmount(opts.amount)) {\n    throw new TypeError(this.constructAmountRequirementsError('amount'));\n  }\n\n  var attributes = {};\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.asset = opts.asset.toXDRObject();\n  attributes.amount = this._toXDRAmount(opts.amount);\n  var paymentOp = new _stellarXdr_generated2.default.PaymentOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.payment(paymentOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"]},"metadata":{},"sourceType":"script"}