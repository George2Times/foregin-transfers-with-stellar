{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _each = require('lodash/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _hashing = require('./hashing');\n\nvar _strkey = require('./strkey');\n\nvar _operation = require('./operation');\n\nvar _network = require('./network');\n\nvar _memo = require('./memo');\n\nvar _keypair = require('./keypair');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Use {@link TransactionBuilder} to build a transaction object, unless you have\n * an object or base64-encoded string of the transaction envelope XDR.\n * Once a Transaction has been created, its attributes and operations\n * should not be changed. You should only add signatures (using {@link Transaction#sign}) to a Transaction object before\n * submitting to the network or forwarding on to additional signers.\n * @constructor\n * @param {string|xdr.TransactionEnvelope} envelope - The transaction envelope object or base64 encoded string.\n * @param {string} [networkPassphrase] passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n */\n\n\nvar Transaction = exports.Transaction = function () {\n  function Transaction(envelope, networkPassphrase) {\n    _classCallCheck(this, Transaction);\n\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _stellarXdr_generated2.default.TransactionEnvelope.fromXDR(buffer);\n    } // Deprecation warning. TODO: remove optionality with next major release.\n\n\n    if (typeof networkPassphrase !== 'string') {\n      console.warn('Global `Network.current()` is deprecated. Please pass explicit argument instead, e.g. `new Transaction(envelope, Networks.PUBLIC)` (see https://git.io/fj9fG for more info).');\n    }\n\n    this._networkPassphrase = networkPassphrase; // since this transaction is immutable, save the tx\n\n    this.tx = envelope.tx();\n    this.source = _strkey.StrKey.encodeEd25519PublicKey(envelope.tx().sourceAccount().ed25519());\n    this.fee = this.tx.fee();\n    this._memo = this.tx.memo();\n    this.sequence = this.tx.seqNum().toString();\n    var timeBounds = this.tx.timeBounds();\n\n    if (timeBounds) {\n      this.timeBounds = {\n        minTime: timeBounds.minTime().toString(),\n        maxTime: timeBounds.maxTime().toString()\n      };\n    }\n\n    var operations = this.tx.operations() || [];\n    this.operations = (0, _map2.default)(operations, function (op) {\n      return _operation.Operation.fromXDRObject(op);\n    });\n    var signatures = envelope.signatures() || [];\n    this.signatures = (0, _map2.default)(signatures, function (s) {\n      return s;\n    });\n  }\n\n  _createClass(Transaction, [{\n    key: 'sign',\n\n    /**\n     * Signs the transaction with the given {@link Keypair}.\n     * @param {...Keypair} keypairs Keypairs of signers\n     * @returns {void}\n     */\n    value: function sign() {\n      var _this = this;\n\n      var txHash = this.hash();\n\n      for (var _len = arguments.length, keypairs = Array(_len), _key = 0; _key < _len; _key++) {\n        keypairs[_key] = arguments[_key];\n      }\n\n      (0, _each2.default)(keypairs, function (kp) {\n        var sig = kp.signDecorated(txHash);\n\n        _this.signatures.push(sig);\n      });\n    }\n    /**\n     * Signs a transaction with the given {@link Keypair}. Useful if someone sends\n     * you a transaction XDR for you to sign and return (see\n     * {@link Transaction#addSignature} for how that works).\n     *\n     * When you get a transaction XDR to sign....\n     * - Instantiate a `Transaction` object with the XDR\n     * - Use {@link Keypair} to generate a keypair object for your Stellar seed.\n     * - Run `getKeypairSignature` with that keypair\n     * - Send back the signature along with your publicKey (not your secret seed!)\n     *\n     * Example:\n     * ```javascript\n     * // `transactionXDR` is a string from the person generating the transaction\n     * const transaction = new Transaction(transactionXDR, networkPassphrase);\n     * const keypair = Keypair.fromSecret(myStellarSeed);\n     * return transaction.getKeypairSignature(keypair);\n     * ```\n     *\n     * @param {Keypair} keypair Keypair of signer\n     * @returns {string} Signature string\n     */\n\n  }, {\n    key: 'getKeypairSignature',\n    value: function getKeypairSignature(keypair) {\n      return keypair.sign(this.hash()).toString('base64');\n    }\n    /**\n     * Add a signature to the transaction. Useful when a party wants to pre-sign\n     * a transaction but doesn't want to give access to their secret keys.\n     * This will also verify whether the signature is valid.\n     *\n     * Here's how you would use this feature to solicit multiple signatures.\n     * - Use `TransactionBuilder` to build a new transaction.\n     * - Make sure to set a long enough timeout on that transaction to give your\n     * signers enough time to sign!\n     * - Once you build the transaction, use `transaction.toXDR()` to get the\n     * base64-encoded XDR string.\n     * - _Warning!_ Once you've built this transaction, don't submit any other\n     * transactions onto your account! Doing so will invalidate this pre-compiled\n     * transaction!\n     * - Send this XDR string to your other parties. They can use the instructions\n     * for {@link Transaction#getKeypairSignature} to sign the transaction.\n     * - They should send you back their `publicKey` and the `signature` string\n     * from {@link Transaction#getKeypairSignature}, both of which you pass to\n     * this function.\n     *\n     * @param {string} publicKey The public key of the signer\n     * @param {string} signature The base64 value of the signature XDR\n     * @returns {TransactionBuilder}\n     */\n\n  }, {\n    key: 'addSignature',\n    value: function addSignature() {\n      var publicKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (!signature || typeof signature !== 'string') {\n        throw new Error('Invalid signature');\n      }\n\n      if (!publicKey || typeof publicKey !== 'string') {\n        throw new Error('Invalid publicKey');\n      }\n\n      var keypair = void 0;\n      var hint = void 0;\n      var signatureBuffer = Buffer.from(signature, 'base64');\n\n      try {\n        keypair = _keypair.Keypair.fromPublicKey(publicKey);\n        hint = keypair.signatureHint();\n      } catch (e) {\n        throw new Error('Invalid publicKey');\n      }\n\n      if (!keypair.verify(this.hash(), signatureBuffer)) {\n        throw new Error('Invalid signature');\n      }\n\n      this.signatures.push(new _stellarXdr_generated2.default.DecoratedSignature({\n        hint: hint,\n        signature: signatureBuffer\n      }));\n    }\n    /**\n     * Add `hashX` signer preimage as signature.\n     * @param {Buffer|String} preimage Preimage of hash used as signer\n     * @returns {void}\n     */\n\n  }, {\n    key: 'signHashX',\n    value: function signHashX(preimage) {\n      if ((0, _isString2.default)(preimage)) {\n        preimage = Buffer.from(preimage, 'hex');\n      }\n\n      if (preimage.length > 64) {\n        throw new Error('preimage cannnot be longer than 64 bytes');\n      }\n\n      var signature = preimage;\n      var hashX = (0, _hashing.hash)(preimage);\n      var hint = hashX.slice(hashX.length - 4);\n      this.signatures.push(new _stellarXdr_generated2.default.DecoratedSignature({\n        hint: hint,\n        signature: signature\n      }));\n    }\n    /**\n     * Returns a hash for this transaction, suitable for signing.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'hash',\n    value: function hash() {\n      return (0, _hashing.hash)(this.signatureBase());\n    }\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'signatureBase',\n    value: function signatureBase() {\n      return Buffer.concat([(0, _hashing.hash)(this.networkPassphrase), _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTx().toXDR(), this.tx.toXDR()]);\n    }\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      var tx = this.tx;\n      var signatures = this.signatures;\n      var envelope = new _stellarXdr_generated2.default.TransactionEnvelope({\n        tx: tx,\n        signatures: signatures\n      });\n      return envelope;\n    }\n    /**\n     * Get the transaction envelope as a base64-encoded string\n     * @returns {string} XDR string\n     */\n\n  }, {\n    key: 'toXDR',\n    value: function toXDR() {\n      return this.toEnvelope().toXDR().toString('base64');\n    }\n  }, {\n    key: 'networkPassphrase',\n    get: function get() {\n      if (this._networkPassphrase) {\n        return this._networkPassphrase;\n      }\n\n      console.warn('Global `Network.current()` is deprecated. Please pass explicit argument instead, e.g. `new Transaction(envelope, Networks.PUBLIC)` (see https://git.io/fj9fG for more info).');\n\n      if (_network.Network.current() === null) {\n        throw new Error('No network selected. Please pass a network argument, e.g. `new Transaction(envelope, Networks.PUBLIC)`.');\n      }\n\n      return _network.Network.current().networkPassphrase();\n    },\n    set: function set(networkPassphrase) {\n      this._networkPassphrase = networkPassphrase;\n    }\n  }, {\n    key: 'memo',\n    get: function get() {\n      return _memo.Memo.fromXDRObject(this._memo);\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }]);\n\n  return Transaction;\n}();","map":{"version":3,"sources":["/home/azureuser/foregin-transfers-with-stellar/infrastructure/pageA/node_modules/stellar-base/lib/transaction.js"],"names":["Object","defineProperty","exports","value","Transaction","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_map","require","_map2","_interopRequireDefault","_each","_each2","_isString","_isString2","_stellarXdr_generated","_stellarXdr_generated2","_hashing","_strkey","_operation","_network","_memo","_keypair","obj","__esModule","default","_classCallCheck","instance","TypeError","envelope","networkPassphrase","buffer","Buffer","from","TransactionEnvelope","fromXDR","console","warn","_networkPassphrase","tx","source","StrKey","encodeEd25519PublicKey","sourceAccount","ed25519","fee","memo","sequence","seqNum","toString","timeBounds","minTime","maxTime","operations","op","Operation","fromXDRObject","signatures","s","sign","_this","txHash","hash","_len","arguments","keypairs","Array","_key","kp","sig","signDecorated","push","getKeypairSignature","keypair","addSignature","publicKey","signature","Error","hint","signatureBuffer","Keypair","fromPublicKey","signatureHint","e","verify","DecoratedSignature","signHashX","preimage","hashX","slice","signatureBase","concat","EnvelopeType","envelopeTypeTx","toXDR","toEnvelope","get","Network","current","set","Memo"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _map = require('lodash/map');\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _each = require('lodash/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _hashing = require('./hashing');\n\nvar _strkey = require('./strkey');\n\nvar _operation = require('./operation');\n\nvar _network = require('./network');\n\nvar _memo = require('./memo');\n\nvar _keypair = require('./keypair');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Use {@link TransactionBuilder} to build a transaction object, unless you have\n * an object or base64-encoded string of the transaction envelope XDR.\n * Once a Transaction has been created, its attributes and operations\n * should not be changed. You should only add signatures (using {@link Transaction#sign}) to a Transaction object before\n * submitting to the network or forwarding on to additional signers.\n * @constructor\n * @param {string|xdr.TransactionEnvelope} envelope - The transaction envelope object or base64 encoded string.\n * @param {string} [networkPassphrase] passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n */\nvar Transaction = exports.Transaction = function () {\n  function Transaction(envelope, networkPassphrase) {\n    _classCallCheck(this, Transaction);\n\n    if (typeof envelope === 'string') {\n      var buffer = Buffer.from(envelope, 'base64');\n      envelope = _stellarXdr_generated2.default.TransactionEnvelope.fromXDR(buffer);\n    }\n\n    // Deprecation warning. TODO: remove optionality with next major release.\n    if (typeof networkPassphrase !== 'string') {\n      console.warn('Global `Network.current()` is deprecated. Please pass explicit argument instead, e.g. `new Transaction(envelope, Networks.PUBLIC)` (see https://git.io/fj9fG for more info).');\n    }\n    this._networkPassphrase = networkPassphrase;\n\n    // since this transaction is immutable, save the tx\n    this.tx = envelope.tx();\n    this.source = _strkey.StrKey.encodeEd25519PublicKey(envelope.tx().sourceAccount().ed25519());\n    this.fee = this.tx.fee();\n    this._memo = this.tx.memo();\n    this.sequence = this.tx.seqNum().toString();\n\n    var timeBounds = this.tx.timeBounds();\n    if (timeBounds) {\n      this.timeBounds = {\n        minTime: timeBounds.minTime().toString(),\n        maxTime: timeBounds.maxTime().toString()\n      };\n    }\n\n    var operations = this.tx.operations() || [];\n    this.operations = (0, _map2.default)(operations, function (op) {\n      return _operation.Operation.fromXDRObject(op);\n    });\n\n    var signatures = envelope.signatures() || [];\n    this.signatures = (0, _map2.default)(signatures, function (s) {\n      return s;\n    });\n  }\n\n  _createClass(Transaction, [{\n    key: 'sign',\n\n\n    /**\n     * Signs the transaction with the given {@link Keypair}.\n     * @param {...Keypair} keypairs Keypairs of signers\n     * @returns {void}\n     */\n    value: function sign() {\n      var _this = this;\n\n      var txHash = this.hash();\n\n      for (var _len = arguments.length, keypairs = Array(_len), _key = 0; _key < _len; _key++) {\n        keypairs[_key] = arguments[_key];\n      }\n\n      (0, _each2.default)(keypairs, function (kp) {\n        var sig = kp.signDecorated(txHash);\n        _this.signatures.push(sig);\n      });\n    }\n\n    /**\n     * Signs a transaction with the given {@link Keypair}. Useful if someone sends\n     * you a transaction XDR for you to sign and return (see\n     * {@link Transaction#addSignature} for how that works).\n     *\n     * When you get a transaction XDR to sign....\n     * - Instantiate a `Transaction` object with the XDR\n     * - Use {@link Keypair} to generate a keypair object for your Stellar seed.\n     * - Run `getKeypairSignature` with that keypair\n     * - Send back the signature along with your publicKey (not your secret seed!)\n     *\n     * Example:\n     * ```javascript\n     * // `transactionXDR` is a string from the person generating the transaction\n     * const transaction = new Transaction(transactionXDR, networkPassphrase);\n     * const keypair = Keypair.fromSecret(myStellarSeed);\n     * return transaction.getKeypairSignature(keypair);\n     * ```\n     *\n     * @param {Keypair} keypair Keypair of signer\n     * @returns {string} Signature string\n     */\n\n  }, {\n    key: 'getKeypairSignature',\n    value: function getKeypairSignature(keypair) {\n      return keypair.sign(this.hash()).toString('base64');\n    }\n\n    /**\n     * Add a signature to the transaction. Useful when a party wants to pre-sign\n     * a transaction but doesn't want to give access to their secret keys.\n     * This will also verify whether the signature is valid.\n     *\n     * Here's how you would use this feature to solicit multiple signatures.\n     * - Use `TransactionBuilder` to build a new transaction.\n     * - Make sure to set a long enough timeout on that transaction to give your\n     * signers enough time to sign!\n     * - Once you build the transaction, use `transaction.toXDR()` to get the\n     * base64-encoded XDR string.\n     * - _Warning!_ Once you've built this transaction, don't submit any other\n     * transactions onto your account! Doing so will invalidate this pre-compiled\n     * transaction!\n     * - Send this XDR string to your other parties. They can use the instructions\n     * for {@link Transaction#getKeypairSignature} to sign the transaction.\n     * - They should send you back their `publicKey` and the `signature` string\n     * from {@link Transaction#getKeypairSignature}, both of which you pass to\n     * this function.\n     *\n     * @param {string} publicKey The public key of the signer\n     * @param {string} signature The base64 value of the signature XDR\n     * @returns {TransactionBuilder}\n     */\n\n  }, {\n    key: 'addSignature',\n    value: function addSignature() {\n      var publicKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n      if (!signature || typeof signature !== 'string') {\n        throw new Error('Invalid signature');\n      }\n\n      if (!publicKey || typeof publicKey !== 'string') {\n        throw new Error('Invalid publicKey');\n      }\n\n      var keypair = void 0;\n      var hint = void 0;\n      var signatureBuffer = Buffer.from(signature, 'base64');\n\n      try {\n        keypair = _keypair.Keypair.fromPublicKey(publicKey);\n        hint = keypair.signatureHint();\n      } catch (e) {\n        throw new Error('Invalid publicKey');\n      }\n\n      if (!keypair.verify(this.hash(), signatureBuffer)) {\n        throw new Error('Invalid signature');\n      }\n\n      this.signatures.push(new _stellarXdr_generated2.default.DecoratedSignature({\n        hint: hint,\n        signature: signatureBuffer\n      }));\n    }\n\n    /**\n     * Add `hashX` signer preimage as signature.\n     * @param {Buffer|String} preimage Preimage of hash used as signer\n     * @returns {void}\n     */\n\n  }, {\n    key: 'signHashX',\n    value: function signHashX(preimage) {\n      if ((0, _isString2.default)(preimage)) {\n        preimage = Buffer.from(preimage, 'hex');\n      }\n\n      if (preimage.length > 64) {\n        throw new Error('preimage cannnot be longer than 64 bytes');\n      }\n\n      var signature = preimage;\n      var hashX = (0, _hashing.hash)(preimage);\n      var hint = hashX.slice(hashX.length - 4);\n      this.signatures.push(new _stellarXdr_generated2.default.DecoratedSignature({ hint: hint, signature: signature }));\n    }\n\n    /**\n     * Returns a hash for this transaction, suitable for signing.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'hash',\n    value: function hash() {\n      return (0, _hashing.hash)(this.signatureBase());\n    }\n\n    /**\n     * Returns the \"signature base\" of this transaction, which is the value\n     * that, when hashed, should be signed to create a signature that\n     * validators on the Stellar Network will accept.\n     *\n     * It is composed of a 4 prefix bytes followed by the xdr-encoded form\n     * of this transaction.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'signatureBase',\n    value: function signatureBase() {\n      return Buffer.concat([(0, _hashing.hash)(this.networkPassphrase), _stellarXdr_generated2.default.EnvelopeType.envelopeTypeTx().toXDR(), this.tx.toXDR()]);\n    }\n\n    /**\n     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.\n     * @returns {xdr.TransactionEnvelope}\n     */\n\n  }, {\n    key: 'toEnvelope',\n    value: function toEnvelope() {\n      var tx = this.tx;\n      var signatures = this.signatures;\n      var envelope = new _stellarXdr_generated2.default.TransactionEnvelope({ tx: tx, signatures: signatures });\n\n      return envelope;\n    }\n\n    /**\n     * Get the transaction envelope as a base64-encoded string\n     * @returns {string} XDR string\n     */\n\n  }, {\n    key: 'toXDR',\n    value: function toXDR() {\n      return this.toEnvelope().toXDR().toString('base64');\n    }\n  }, {\n    key: 'networkPassphrase',\n    get: function get() {\n      if (this._networkPassphrase) {\n        return this._networkPassphrase;\n      }\n\n      console.warn('Global `Network.current()` is deprecated. Please pass explicit argument instead, e.g. `new Transaction(envelope, Networks.PUBLIC)` (see https://git.io/fj9fG for more info).');\n\n      if (_network.Network.current() === null) {\n        throw new Error('No network selected. Please pass a network argument, e.g. `new Transaction(envelope, Networks.PUBLIC)`.');\n      }\n\n      return _network.Network.current().networkPassphrase();\n    },\n    set: function set(networkPassphrase) {\n      this._networkPassphrase = networkPassphrase;\n    }\n  }, {\n    key: 'memo',\n    get: function get() {\n      return _memo.Memo.fromXDRObject(this._memo);\n    },\n    set: function set(value) {\n      throw new Error('Transaction is immutable');\n    }\n  }]);\n\n  return Transaction;\n}();"]},"metadata":{},"sourceType":"script"}