{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccount = createAccount;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Create and fund a non existent account.\n * @function\n * @alias Operation.createAccount\n * @param {object} opts Options object\n * @param {string} opts.destination - Destination account ID to create an account for.\n * @param {string} opts.startingBalance - Amount in XLM the account should be funded for. Must be greater\n *                                   than the [reserve balance amount](https://www.stellar.org/developers/learn/concepts/fees.html).\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.CreateAccountOp} Create account operation\n */\n\n\nfunction createAccount(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.destination)) {\n    throw new Error('destination is invalid');\n  }\n\n  if (!this.isValidAmount(opts.startingBalance)) {\n    throw new TypeError(this.constructAmountRequirementsError('startingBalance'));\n  }\n\n  var attributes = {};\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.startingBalance = this._toXDRAmount(opts.startingBalance);\n  var createAccountOp = new _stellarXdr_generated2.default.CreateAccountOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.createAccount(createAccountOp);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"sources":["/home/azureuser/foregin-transfers-with-stellar/infrastructure/pageB/node_modules/stellar-base/lib/operations/create_account.js"],"names":["Object","defineProperty","exports","value","createAccount","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_keypair","_strkey","obj","__esModule","default","opts","StrKey","isValidEd25519PublicKey","destination","Error","isValidAmount","startingBalance","TypeError","constructAmountRequirementsError","attributes","Keypair","fromPublicKey","xdrAccountId","_toXDRAmount","createAccountOp","CreateAccountOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,aAAR,GAAwBA,aAAxB;;AAEA,IAAIC,qBAAqB,GAAGC,OAAO,CAAC,oCAAD,CAAnC;;AAEA,IAAIC,sBAAsB,GAAGC,sBAAsB,CAACH,qBAAD,CAAnD;;AAEA,IAAII,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAII,OAAO,GAAGJ,OAAO,CAAC,WAAD,CAArB;;AAEA,SAASE,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASP,aAAT,CAAuBU,IAAvB,EAA6B;AAC3B,MAAI,CAACJ,OAAO,CAACK,MAAR,CAAeC,uBAAf,CAAuCF,IAAI,CAACG,WAA5C,CAAL,EAA+D;AAC7D,UAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAI,CAAC,KAAKC,aAAL,CAAmBL,IAAI,CAACM,eAAxB,CAAL,EAA+C;AAC7C,UAAM,IAAIC,SAAJ,CAAc,KAAKC,gCAAL,CAAsC,iBAAtC,CAAd,CAAN;AACD;;AACD,MAAIC,UAAU,GAAG,EAAjB;AACAA,EAAAA,UAAU,CAACN,WAAX,GAAyBR,QAAQ,CAACe,OAAT,CAAiBC,aAAjB,CAA+BX,IAAI,CAACG,WAApC,EAAiDS,YAAjD,EAAzB;AACAH,EAAAA,UAAU,CAACH,eAAX,GAA6B,KAAKO,YAAL,CAAkBb,IAAI,CAACM,eAAvB,CAA7B;AACA,MAAIQ,eAAe,GAAG,IAAIrB,sBAAsB,CAACM,OAAvB,CAA+BgB,eAAnC,CAAmDN,UAAnD,CAAtB;AAEA,MAAIO,YAAY,GAAG,EAAnB;AACAA,EAAAA,YAAY,CAACC,IAAb,GAAoBxB,sBAAsB,CAACM,OAAvB,CAA+BmB,aAA/B,CAA6C5B,aAA7C,CAA2DwB,eAA3D,CAApB;AACA,OAAKK,gBAAL,CAAsBH,YAAtB,EAAoChB,IAApC;AAEA,SAAO,IAAIP,sBAAsB,CAACM,OAAvB,CAA+BqB,SAAnC,CAA6CJ,YAA7C,CAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAccount = createAccount;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Create and fund a non existent account.\n * @function\n * @alias Operation.createAccount\n * @param {object} opts Options object\n * @param {string} opts.destination - Destination account ID to create an account for.\n * @param {string} opts.startingBalance - Amount in XLM the account should be funded for. Must be greater\n *                                   than the [reserve balance amount](https://www.stellar.org/developers/learn/concepts/fees.html).\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.CreateAccountOp} Create account operation\n */\nfunction createAccount(opts) {\n  if (!_strkey.StrKey.isValidEd25519PublicKey(opts.destination)) {\n    throw new Error('destination is invalid');\n  }\n  if (!this.isValidAmount(opts.startingBalance)) {\n    throw new TypeError(this.constructAmountRequirementsError('startingBalance'));\n  }\n  var attributes = {};\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.startingBalance = this._toXDRAmount(opts.startingBalance);\n  var createAccountOp = new _stellarXdr_generated2.default.CreateAccountOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.createAccount(createAccountOp);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"]},"metadata":{},"sourceType":"script"}