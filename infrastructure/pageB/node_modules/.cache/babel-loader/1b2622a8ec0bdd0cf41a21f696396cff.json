{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pathPayment = pathPayment;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Returns a XDR PaymentOp. A \"payment\" operation send the specified amount to the\n * destination account, optionally through a path. XLM payments create the destination\n * account if it does not exist.\n * @function\n * @alias Operation.pathPayment\n * @param {object} opts Options object\n * @param {Asset} opts.sendAsset - The asset to pay with.\n * @param {string} opts.sendMax - The maximum amount of sendAsset to send.\n * @param {string} opts.destination - The destination account to send to.\n * @param {Asset} opts.destAsset - The asset the destination will receive.\n * @param {string} opts.destAmount - The amount the destination receives.\n * @param {Asset[]} opts.path - An array of Asset objects to use as the path.\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.PathPaymentOp} Path Payment operation\n */\n\n\nfunction pathPayment(opts) {\n  switch (true) {\n    case !opts.sendAsset:\n      throw new Error('Must specify a send asset');\n\n    case !this.isValidAmount(opts.sendMax):\n      throw new TypeError(this.constructAmountRequirementsError('sendMax'));\n\n    case !_strkey.StrKey.isValidEd25519PublicKey(opts.destination):\n      throw new Error('destination is invalid');\n\n    case !opts.destAsset:\n      throw new Error('Must provide a destAsset for a payment operation');\n\n    case !this.isValidAmount(opts.destAmount):\n      throw new TypeError(this.constructAmountRequirementsError('destAmount'));\n\n    default:\n      break;\n  }\n\n  var attributes = {};\n  attributes.sendAsset = opts.sendAsset.toXDRObject();\n  attributes.sendMax = this._toXDRAmount(opts.sendMax);\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.destAsset = opts.destAsset.toXDRObject();\n  attributes.destAmount = this._toXDRAmount(opts.destAmount);\n  var path = opts.path ? opts.path : [];\n  attributes.path = path.map(function (x) {\n    return x.toXDRObject();\n  });\n  var payment = new _stellarXdr_generated2.default.PathPaymentOp(attributes);\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.pathPayment(payment);\n  this.setSourceAccount(opAttributes, opts);\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}","map":{"version":3,"sources":["/home/azureuser/foregin-transfers-with-stellar/infrastructure/pageB/node_modules/stellar-base/lib/operations/path_payment.js"],"names":["Object","defineProperty","exports","value","pathPayment","_stellarXdr_generated","require","_stellarXdr_generated2","_interopRequireDefault","_keypair","_strkey","obj","__esModule","default","opts","sendAsset","Error","isValidAmount","sendMax","TypeError","constructAmountRequirementsError","StrKey","isValidEd25519PublicKey","destination","destAsset","destAmount","attributes","toXDRObject","_toXDRAmount","Keypair","fromPublicKey","xdrAccountId","path","map","x","payment","PathPaymentOp","opAttributes","body","OperationBody","setSourceAccount","Operation"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pathPayment = pathPayment;\n\nvar _stellarXdr_generated = require('../generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _keypair = require('../keypair');\n\nvar _strkey = require('../strkey');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns a XDR PaymentOp. A \"payment\" operation send the specified amount to the\n * destination account, optionally through a path. XLM payments create the destination\n * account if it does not exist.\n * @function\n * @alias Operation.pathPayment\n * @param {object} opts Options object\n * @param {Asset} opts.sendAsset - The asset to pay with.\n * @param {string} opts.sendMax - The maximum amount of sendAsset to send.\n * @param {string} opts.destination - The destination account to send to.\n * @param {Asset} opts.destAsset - The asset the destination will receive.\n * @param {string} opts.destAmount - The amount the destination receives.\n * @param {Asset[]} opts.path - An array of Asset objects to use as the path.\n * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.\n * @returns {xdr.PathPaymentOp} Path Payment operation\n */\nfunction pathPayment(opts) {\n  switch (true) {\n    case !opts.sendAsset:\n      throw new Error('Must specify a send asset');\n    case !this.isValidAmount(opts.sendMax):\n      throw new TypeError(this.constructAmountRequirementsError('sendMax'));\n    case !_strkey.StrKey.isValidEd25519PublicKey(opts.destination):\n      throw new Error('destination is invalid');\n    case !opts.destAsset:\n      throw new Error('Must provide a destAsset for a payment operation');\n    case !this.isValidAmount(opts.destAmount):\n      throw new TypeError(this.constructAmountRequirementsError('destAmount'));\n    default:\n      break;\n  }\n\n  var attributes = {};\n  attributes.sendAsset = opts.sendAsset.toXDRObject();\n  attributes.sendMax = this._toXDRAmount(opts.sendMax);\n  attributes.destination = _keypair.Keypair.fromPublicKey(opts.destination).xdrAccountId();\n  attributes.destAsset = opts.destAsset.toXDRObject();\n  attributes.destAmount = this._toXDRAmount(opts.destAmount);\n\n  var path = opts.path ? opts.path : [];\n  attributes.path = path.map(function (x) {\n    return x.toXDRObject();\n  });\n\n  var payment = new _stellarXdr_generated2.default.PathPaymentOp(attributes);\n\n  var opAttributes = {};\n  opAttributes.body = _stellarXdr_generated2.default.OperationBody.pathPayment(payment);\n  this.setSourceAccount(opAttributes, opts);\n\n  return new _stellarXdr_generated2.default.Operation(opAttributes);\n}"]},"metadata":{},"sourceType":"script"}