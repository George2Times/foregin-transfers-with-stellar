{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Operation = exports.AuthImmutableFlag = exports.AuthRevocableFlag = exports.AuthRequiredFlag = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n/* eslint-disable no-bitwise */\n\n\nvar _jsXdr = require('js-xdr');\n\nvar _bignumber = require('bignumber.js');\n\nvar _bignumber2 = _interopRequireDefault(_bignumber);\n\nvar _trimEnd = require('lodash/trimEnd');\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _isNumber = require('lodash/isNumber');\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nvar _isFinite = require('lodash/isFinite');\n\nvar _isFinite2 = _interopRequireDefault(_isFinite);\n\nvar _continued_fraction = require('./util/continued_fraction');\n\nvar _asset = require('./asset');\n\nvar _strkey = require('./strkey');\n\nvar _keypair = require('./keypair');\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _index = require('./operations/index');\n\nvar ops = _interopRequireWildcard(_index);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar ONE = 10000000;\nvar MAX_INT64 = '9223372036854775807';\n/**\n * When set using `{@link Operation.setOptions}` option, requires the issuing account to\n * give other accounts permission before they can hold the issuing accountâ€™s credit.\n * @constant\n * @see [Account flags](https://www.stellar.org/developers/guides/concepts/accounts.html#flags)\n */\n\nvar AuthRequiredFlag = exports.AuthRequiredFlag = 1 << 0;\n/**\n * When set using `{@link Operation.setOptions}` option, allows the issuing account to\n * revoke its credit held by other accounts.\n * @constant\n * @see [Account flags](https://www.stellar.org/developers/guides/concepts/accounts.html#flags)\n */\n\nvar AuthRevocableFlag = exports.AuthRevocableFlag = 1 << 1;\n/**\n * When set using `{@link Operation.setOptions}` option, then none of the authorization flags\n * can be set and the account can never be deleted.\n * @constant\n * @see [Account flags](https://www.stellar.org/developers/guides/concepts/accounts.html#flags)\n */\n\nvar AuthImmutableFlag = exports.AuthImmutableFlag = 1 << 2;\n/**\n * `Operation` class represents [operations](https://www.stellar.org/developers/learn/concepts/operations.html) in Stellar network.\n * Use one of static methods to create operations:\n * * `{@link Operation.createAccount}`\n * * `{@link Operation.payment}`\n * * `{@link Operation.pathPayment}`\n * * `{@link Operation.manageSellOffer}`\n * * `{@link Operation.manageBuyOffer}`\n * * `{@link Operation.createPassiveSellOffer}`\n * * `{@link Operation.setOptions}`\n * * `{@link Operation.changeTrust}`\n * * `{@link Operation.allowTrust}`\n * * `{@link Operation.accountMerge}`\n * * `{@link Operation.inflation}`\n * * `{@link Operation.manageData}`\n * * `{@link Operation.bumpSequence}`\n *\n * These operations are deprecated and will be removed in a later version:\n * * `{@link Operation.manageOffer}`\n * * `{@link Operation.createPassiveOffer}`\n *\n *\n * @class Operation\n */\n\nvar Operation = exports.Operation = function () {\n  function Operation() {\n    _classCallCheck(this, Operation);\n  }\n\n  _createClass(Operation, null, [{\n    key: 'setSourceAccount',\n    value: function setSourceAccount(opAttributes, opts) {\n      if (opts.source) {\n        if (!_strkey.StrKey.isValidEd25519PublicKey(opts.source)) {\n          throw new Error('Source address is invalid');\n        }\n\n        opAttributes.sourceAccount = _keypair.Keypair.fromPublicKey(opts.source).xdrAccountId();\n      }\n    }\n    /**\n     * Converts the XDR Operation object to the opts object used to create the XDR\n     * operation.\n     * @param {xdr.Operation} operation - An XDR Operation.\n     * @return {Operation}\n     */\n\n  }, {\n    key: 'fromXDRObject',\n    value: function fromXDRObject(operation) {\n      function accountIdtoAddress(accountId) {\n        return _strkey.StrKey.encodeEd25519PublicKey(accountId.ed25519());\n      }\n\n      var result = {};\n\n      if (operation.sourceAccount()) {\n        result.source = accountIdtoAddress(operation.sourceAccount());\n      }\n\n      var attrs = operation.body().value();\n\n      switch (operation.body().switch().name) {\n        case 'createAccount':\n          {\n            result.type = 'createAccount';\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.startingBalance = this._fromXDRAmount(attrs.startingBalance());\n            break;\n          }\n\n        case 'payment':\n          {\n            result.type = 'payment';\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            break;\n          }\n\n        case 'pathPayment':\n          {\n            result.type = 'pathPayment';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendMax = this._fromXDRAmount(attrs.sendMax());\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destAmount = this._fromXDRAmount(attrs.destAmount());\n            result.path = [];\n            var path = attrs.path(); // note that Object.values isn't supported by node 6!\n\n            Object.keys(path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(path[pathKey]));\n            });\n            break;\n          }\n\n        case 'changeTrust':\n          {\n            result.type = 'changeTrust';\n            result.line = _asset.Asset.fromOperation(attrs.line());\n            result.limit = this._fromXDRAmount(attrs.limit());\n            break;\n          }\n\n        case 'allowTrust':\n          {\n            result.type = 'allowTrust';\n            result.trustor = accountIdtoAddress(attrs.trustor());\n            result.assetCode = attrs.asset().value().toString();\n            result.assetCode = (0, _trimEnd2.default)(result.assetCode, '\\0');\n            result.authorize = attrs.authorize();\n            break;\n          }\n\n        case 'setOption':\n          {\n            result.type = 'setOptions';\n\n            if (attrs.inflationDest()) {\n              result.inflationDest = accountIdtoAddress(attrs.inflationDest());\n            }\n\n            result.clearFlags = attrs.clearFlags();\n            result.setFlags = attrs.setFlags();\n            result.masterWeight = attrs.masterWeight();\n            result.lowThreshold = attrs.lowThreshold();\n            result.medThreshold = attrs.medThreshold();\n            result.highThreshold = attrs.highThreshold(); // home_domain is checked by iscntrl in stellar-core\n\n            result.homeDomain = attrs.homeDomain() !== undefined ? attrs.homeDomain().toString('ascii') : undefined;\n\n            if (attrs.signer()) {\n              var signer = {};\n              var arm = attrs.signer().key().arm();\n\n              if (arm === 'ed25519') {\n                signer.ed25519PublicKey = accountIdtoAddress(attrs.signer().key());\n              } else if (arm === 'preAuthTx') {\n                signer.preAuthTx = attrs.signer().key().preAuthTx();\n              } else if (arm === 'hashX') {\n                signer.sha256Hash = attrs.signer().key().hashX();\n              }\n\n              signer.weight = attrs.signer().weight();\n              result.signer = signer;\n            }\n\n            break;\n          }\n        // the next case intentionally falls through!\n\n        case 'manageOffer':\n        case 'manageSellOffer':\n          {\n            result.type = 'manageSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n\n        case 'manageBuyOffer':\n          {\n            result.type = 'manageBuyOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.buyAmount = this._fromXDRAmount(attrs.buyAmount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        // the next case intentionally falls through!\n\n        case 'createPassiveOffer':\n        case 'createPassiveSellOffer':\n          {\n            result.type = 'createPassiveSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            break;\n          }\n\n        case 'accountMerge':\n          {\n            result.type = 'accountMerge';\n            result.destination = accountIdtoAddress(attrs);\n            break;\n          }\n\n        case 'manageDatum':\n          {\n            result.type = 'manageData'; // manage_data.name is checked by iscntrl in stellar-core\n\n            result.name = attrs.dataName().toString('ascii');\n            result.value = attrs.dataValue();\n            break;\n          }\n\n        case 'inflation':\n          {\n            result.type = 'inflation';\n            break;\n          }\n\n        case 'bumpSequence':\n          {\n            result.type = 'bumpSequence';\n            result.bumpTo = attrs.bumpTo().toString();\n            break;\n          }\n\n        default:\n          {\n            throw new Error('Unknown operation');\n          }\n      }\n\n      return result;\n    }\n  }, {\n    key: 'isValidAmount',\n    value: function isValidAmount(value) {\n      var allowZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!(0, _isString2.default)(value)) {\n        return false;\n      }\n\n      var amount = void 0;\n\n      try {\n        amount = new _bignumber2.default(value);\n      } catch (e) {\n        return false;\n      }\n\n      if ( // == 0\n      !allowZero && amount.isZero() || // < 0\n      amount.isNegative() || // > Max value\n      amount.times(ONE).greaterThan(new _bignumber2.default(MAX_INT64).toString()) || // Decimal places (max 7)\n      amount.decimalPlaces() > 7 || // NaN or Infinity\n      amount.isNaN() || !amount.isFinite()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'constructAmountRequirementsError',\n    value: function constructAmountRequirementsError(arg) {\n      return arg + ' argument must be of type String, represent a positive number and have at most 7 digits after the decimal';\n    }\n    /**\n     * Returns value converted to uint32 value or undefined.\n     * If `value` is not `Number`, `String` or `Undefined` then throws an error.\n     * Used in {@link Operation.setOptions}.\n     * @private\n     * @param {string} name Name of the property (used in error message only)\n     * @param {*} value Value to check\n     * @param {function(value, name)} isValidFunction Function to check other constraints (the argument will be a `Number`)\n     * @returns {undefined|Number}\n     */\n\n  }, {\n    key: '_checkUnsignedIntValue',\n    value: function _checkUnsignedIntValue(name, value) {\n      var isValidFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if ((0, _isUndefined2.default)(value)) {\n        return undefined;\n      }\n\n      if ((0, _isString2.default)(value)) {\n        value = parseFloat(value);\n      }\n\n      switch (true) {\n        case !(0, _isNumber2.default)(value) || !(0, _isFinite2.default)(value) || value % 1 !== 0:\n          throw new Error(name + ' value is invalid');\n\n        case value < 0:\n          throw new Error(name + ' value must be unsigned');\n\n        case !isValidFunction || isValidFunction && isValidFunction(value, name):\n          return value;\n\n        default:\n          throw new Error(name + ' value is invalid');\n      }\n    }\n    /**\n     * @private\n     * @param {string|BigNumber} value Value\n     * @returns {Hyper} XDR amount\n     */\n\n  }, {\n    key: '_toXDRAmount',\n    value: function _toXDRAmount(value) {\n      var amount = new _bignumber2.default(value).mul(ONE);\n      return _jsXdr.Hyper.fromString(amount.toString());\n    }\n    /**\n     * @private\n     * @param {string|BigNumber} value XDR amount\n     * @returns {BigNumber} Number\n     */\n\n  }, {\n    key: '_fromXDRAmount',\n    value: function _fromXDRAmount(value) {\n      return new _bignumber2.default(value).div(ONE).toFixed(7);\n    }\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {BigNumber} Big string\n     */\n\n  }, {\n    key: '_fromXDRPrice',\n    value: function _fromXDRPrice(price) {\n      var n = new _bignumber2.default(price.n());\n      return n.div(new _bignumber2.default(price.d())).toString();\n    }\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {object} XDR price object\n     */\n\n  }, {\n    key: '_toXDRPrice',\n    value: function _toXDRPrice(price) {\n      var xdrObject = void 0;\n\n      if (price.n && price.d) {\n        xdrObject = new _stellarXdr_generated2.default.Price(price);\n      } else {\n        price = new _bignumber2.default(price);\n        var approx = (0, _continued_fraction.best_r)(price);\n        xdrObject = new _stellarXdr_generated2.default.Price({\n          n: parseInt(approx[0], 10),\n          d: parseInt(approx[1], 10)\n        });\n      }\n\n      if (xdrObject.n() < 0 || xdrObject.d() < 0) {\n        throw new Error('price must be positive');\n      }\n\n      return xdrObject;\n    }\n  }]);\n\n  return Operation;\n}(); // Attach all imported operations as static methods on the Operation class\n\n\nOperation.accountMerge = ops.accountMerge;\nOperation.allowTrust = ops.allowTrust;\nOperation.bumpSequence = ops.bumpSequence;\nOperation.changeTrust = ops.changeTrust;\nOperation.createAccount = ops.createAccount;\nOperation.createPassiveSellOffer = ops.createPassiveSellOffer;\nOperation.inflation = ops.inflation;\nOperation.manageData = ops.manageData;\nOperation.manageSellOffer = ops.manageSellOffer;\nOperation.manageBuyOffer = ops.manageBuyOffer;\nOperation.pathPayment = ops.pathPayment;\nOperation.payment = ops.payment;\nOperation.setOptions = ops.setOptions; // deprecated, to be removed after 1.0.1\n\nOperation.manageOffer = ops.manageOffer;\nOperation.createPassiveOffer = ops.createPassiveOffer;","map":{"version":3,"sources":["/home/azureuser/foregin-transfers-with-stellar/infrastructure/pageB/node_modules/stellar-base/lib/operation.js"],"names":["Object","defineProperty","exports","value","Operation","AuthImmutableFlag","AuthRevocableFlag","AuthRequiredFlag","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_jsXdr","require","_bignumber","_bignumber2","_interopRequireDefault","_trimEnd","_trimEnd2","_isUndefined","_isUndefined2","_isString","_isString2","_isNumber","_isNumber2","_isFinite","_isFinite2","_continued_fraction","_asset","_strkey","_keypair","_stellarXdr_generated","_stellarXdr_generated2","_index","ops","_interopRequireWildcard","obj","__esModule","newObj","hasOwnProperty","call","default","_classCallCheck","instance","TypeError","ONE","MAX_INT64","setSourceAccount","opAttributes","opts","source","StrKey","isValidEd25519PublicKey","Error","sourceAccount","Keypair","fromPublicKey","xdrAccountId","fromXDRObject","operation","accountIdtoAddress","accountId","encodeEd25519PublicKey","ed25519","result","attrs","body","switch","name","type","destination","startingBalance","_fromXDRAmount","asset","Asset","fromOperation","amount","sendAsset","sendMax","destAsset","destAmount","path","keys","forEach","pathKey","push","line","limit","trustor","assetCode","toString","authorize","inflationDest","clearFlags","setFlags","masterWeight","lowThreshold","medThreshold","highThreshold","homeDomain","signer","arm","ed25519PublicKey","preAuthTx","sha256Hash","hashX","weight","selling","buying","price","_fromXDRPrice","offerId","buyAmount","dataName","dataValue","bumpTo","isValidAmount","allowZero","arguments","e","isZero","isNegative","times","greaterThan","decimalPlaces","isNaN","isFinite","constructAmountRequirementsError","arg","_checkUnsignedIntValue","isValidFunction","parseFloat","_toXDRAmount","mul","Hyper","fromString","div","toFixed","n","d","_toXDRPrice","xdrObject","Price","approx","best_r","parseInt","accountMerge","allowTrust","bumpSequence","changeTrust","createAccount","createPassiveSellOffer","inflation","manageData","manageSellOffer","manageBuyOffer","pathPayment","payment","setOptions","manageOffer","createPassiveOffer"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Operation = exports.AuthImmutableFlag = exports.AuthRevocableFlag = exports.AuthRequiredFlag = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable no-bitwise */\n\nvar _jsXdr = require('js-xdr');\n\nvar _bignumber = require('bignumber.js');\n\nvar _bignumber2 = _interopRequireDefault(_bignumber);\n\nvar _trimEnd = require('lodash/trimEnd');\n\nvar _trimEnd2 = _interopRequireDefault(_trimEnd);\n\nvar _isUndefined = require('lodash/isUndefined');\n\nvar _isUndefined2 = _interopRequireDefault(_isUndefined);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _isNumber = require('lodash/isNumber');\n\nvar _isNumber2 = _interopRequireDefault(_isNumber);\n\nvar _isFinite = require('lodash/isFinite');\n\nvar _isFinite2 = _interopRequireDefault(_isFinite);\n\nvar _continued_fraction = require('./util/continued_fraction');\n\nvar _asset = require('./asset');\n\nvar _strkey = require('./strkey');\n\nvar _keypair = require('./keypair');\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _index = require('./operations/index');\n\nvar ops = _interopRequireWildcard(_index);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ONE = 10000000;\nvar MAX_INT64 = '9223372036854775807';\n\n/**\n * When set using `{@link Operation.setOptions}` option, requires the issuing account to\n * give other accounts permission before they can hold the issuing accountâ€™s credit.\n * @constant\n * @see [Account flags](https://www.stellar.org/developers/guides/concepts/accounts.html#flags)\n */\nvar AuthRequiredFlag = exports.AuthRequiredFlag = 1 << 0;\n/**\n * When set using `{@link Operation.setOptions}` option, allows the issuing account to\n * revoke its credit held by other accounts.\n * @constant\n * @see [Account flags](https://www.stellar.org/developers/guides/concepts/accounts.html#flags)\n */\nvar AuthRevocableFlag = exports.AuthRevocableFlag = 1 << 1;\n/**\n * When set using `{@link Operation.setOptions}` option, then none of the authorization flags\n * can be set and the account can never be deleted.\n * @constant\n * @see [Account flags](https://www.stellar.org/developers/guides/concepts/accounts.html#flags)\n */\nvar AuthImmutableFlag = exports.AuthImmutableFlag = 1 << 2;\n\n/**\n * `Operation` class represents [operations](https://www.stellar.org/developers/learn/concepts/operations.html) in Stellar network.\n * Use one of static methods to create operations:\n * * `{@link Operation.createAccount}`\n * * `{@link Operation.payment}`\n * * `{@link Operation.pathPayment}`\n * * `{@link Operation.manageSellOffer}`\n * * `{@link Operation.manageBuyOffer}`\n * * `{@link Operation.createPassiveSellOffer}`\n * * `{@link Operation.setOptions}`\n * * `{@link Operation.changeTrust}`\n * * `{@link Operation.allowTrust}`\n * * `{@link Operation.accountMerge}`\n * * `{@link Operation.inflation}`\n * * `{@link Operation.manageData}`\n * * `{@link Operation.bumpSequence}`\n *\n * These operations are deprecated and will be removed in a later version:\n * * `{@link Operation.manageOffer}`\n * * `{@link Operation.createPassiveOffer}`\n *\n *\n * @class Operation\n */\n\nvar Operation = exports.Operation = function () {\n  function Operation() {\n    _classCallCheck(this, Operation);\n  }\n\n  _createClass(Operation, null, [{\n    key: 'setSourceAccount',\n    value: function setSourceAccount(opAttributes, opts) {\n      if (opts.source) {\n        if (!_strkey.StrKey.isValidEd25519PublicKey(opts.source)) {\n          throw new Error('Source address is invalid');\n        }\n        opAttributes.sourceAccount = _keypair.Keypair.fromPublicKey(opts.source).xdrAccountId();\n      }\n    }\n\n    /**\n     * Converts the XDR Operation object to the opts object used to create the XDR\n     * operation.\n     * @param {xdr.Operation} operation - An XDR Operation.\n     * @return {Operation}\n     */\n\n  }, {\n    key: 'fromXDRObject',\n    value: function fromXDRObject(operation) {\n      function accountIdtoAddress(accountId) {\n        return _strkey.StrKey.encodeEd25519PublicKey(accountId.ed25519());\n      }\n\n      var result = {};\n      if (operation.sourceAccount()) {\n        result.source = accountIdtoAddress(operation.sourceAccount());\n      }\n\n      var attrs = operation.body().value();\n\n      switch (operation.body().switch().name) {\n        case 'createAccount':\n          {\n            result.type = 'createAccount';\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.startingBalance = this._fromXDRAmount(attrs.startingBalance());\n            break;\n          }\n        case 'payment':\n          {\n            result.type = 'payment';\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.asset = _asset.Asset.fromOperation(attrs.asset());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            break;\n          }\n        case 'pathPayment':\n          {\n            result.type = 'pathPayment';\n            result.sendAsset = _asset.Asset.fromOperation(attrs.sendAsset());\n            result.sendMax = this._fromXDRAmount(attrs.sendMax());\n            result.destination = accountIdtoAddress(attrs.destination());\n            result.destAsset = _asset.Asset.fromOperation(attrs.destAsset());\n            result.destAmount = this._fromXDRAmount(attrs.destAmount());\n            result.path = [];\n\n            var path = attrs.path();\n\n            // note that Object.values isn't supported by node 6!\n            Object.keys(path).forEach(function (pathKey) {\n              result.path.push(_asset.Asset.fromOperation(path[pathKey]));\n            });\n            break;\n          }\n        case 'changeTrust':\n          {\n            result.type = 'changeTrust';\n            result.line = _asset.Asset.fromOperation(attrs.line());\n            result.limit = this._fromXDRAmount(attrs.limit());\n            break;\n          }\n        case 'allowTrust':\n          {\n            result.type = 'allowTrust';\n            result.trustor = accountIdtoAddress(attrs.trustor());\n            result.assetCode = attrs.asset().value().toString();\n            result.assetCode = (0, _trimEnd2.default)(result.assetCode, '\\0');\n            result.authorize = attrs.authorize();\n            break;\n          }\n        case 'setOption':\n          {\n            result.type = 'setOptions';\n            if (attrs.inflationDest()) {\n              result.inflationDest = accountIdtoAddress(attrs.inflationDest());\n            }\n\n            result.clearFlags = attrs.clearFlags();\n            result.setFlags = attrs.setFlags();\n            result.masterWeight = attrs.masterWeight();\n            result.lowThreshold = attrs.lowThreshold();\n            result.medThreshold = attrs.medThreshold();\n            result.highThreshold = attrs.highThreshold();\n            // home_domain is checked by iscntrl in stellar-core\n            result.homeDomain = attrs.homeDomain() !== undefined ? attrs.homeDomain().toString('ascii') : undefined;\n\n            if (attrs.signer()) {\n              var signer = {};\n              var arm = attrs.signer().key().arm();\n              if (arm === 'ed25519') {\n                signer.ed25519PublicKey = accountIdtoAddress(attrs.signer().key());\n              } else if (arm === 'preAuthTx') {\n                signer.preAuthTx = attrs.signer().key().preAuthTx();\n              } else if (arm === 'hashX') {\n                signer.sha256Hash = attrs.signer().key().hashX();\n              }\n\n              signer.weight = attrs.signer().weight();\n              result.signer = signer;\n            }\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'manageOffer':\n        case 'manageSellOffer':\n          {\n            result.type = 'manageSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        case 'manageBuyOffer':\n          {\n            result.type = 'manageBuyOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.buyAmount = this._fromXDRAmount(attrs.buyAmount());\n            result.price = this._fromXDRPrice(attrs.price());\n            result.offerId = attrs.offerId().toString();\n            break;\n          }\n        // the next case intentionally falls through!\n        case 'createPassiveOffer':\n        case 'createPassiveSellOffer':\n          {\n            result.type = 'createPassiveSellOffer';\n            result.selling = _asset.Asset.fromOperation(attrs.selling());\n            result.buying = _asset.Asset.fromOperation(attrs.buying());\n            result.amount = this._fromXDRAmount(attrs.amount());\n            result.price = this._fromXDRPrice(attrs.price());\n            break;\n          }\n        case 'accountMerge':\n          {\n            result.type = 'accountMerge';\n            result.destination = accountIdtoAddress(attrs);\n            break;\n          }\n        case 'manageDatum':\n          {\n            result.type = 'manageData';\n            // manage_data.name is checked by iscntrl in stellar-core\n            result.name = attrs.dataName().toString('ascii');\n            result.value = attrs.dataValue();\n            break;\n          }\n        case 'inflation':\n          {\n            result.type = 'inflation';\n            break;\n          }\n        case 'bumpSequence':\n          {\n            result.type = 'bumpSequence';\n            result.bumpTo = attrs.bumpTo().toString();\n            break;\n          }\n        default:\n          {\n            throw new Error('Unknown operation');\n          }\n      }\n      return result;\n    }\n  }, {\n    key: 'isValidAmount',\n    value: function isValidAmount(value) {\n      var allowZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!(0, _isString2.default)(value)) {\n        return false;\n      }\n\n      var amount = void 0;\n      try {\n        amount = new _bignumber2.default(value);\n      } catch (e) {\n        return false;\n      }\n\n      if (\n      // == 0\n      !allowZero && amount.isZero() ||\n      // < 0\n      amount.isNegative() ||\n      // > Max value\n      amount.times(ONE).greaterThan(new _bignumber2.default(MAX_INT64).toString()) ||\n      // Decimal places (max 7)\n      amount.decimalPlaces() > 7 ||\n      // NaN or Infinity\n      amount.isNaN() || !amount.isFinite()) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'constructAmountRequirementsError',\n    value: function constructAmountRequirementsError(arg) {\n      return arg + ' argument must be of type String, represent a positive number and have at most 7 digits after the decimal';\n    }\n\n    /**\n     * Returns value converted to uint32 value or undefined.\n     * If `value` is not `Number`, `String` or `Undefined` then throws an error.\n     * Used in {@link Operation.setOptions}.\n     * @private\n     * @param {string} name Name of the property (used in error message only)\n     * @param {*} value Value to check\n     * @param {function(value, name)} isValidFunction Function to check other constraints (the argument will be a `Number`)\n     * @returns {undefined|Number}\n     */\n\n  }, {\n    key: '_checkUnsignedIntValue',\n    value: function _checkUnsignedIntValue(name, value) {\n      var isValidFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if ((0, _isUndefined2.default)(value)) {\n        return undefined;\n      }\n\n      if ((0, _isString2.default)(value)) {\n        value = parseFloat(value);\n      }\n\n      switch (true) {\n        case !(0, _isNumber2.default)(value) || !(0, _isFinite2.default)(value) || value % 1 !== 0:\n          throw new Error(name + ' value is invalid');\n        case value < 0:\n          throw new Error(name + ' value must be unsigned');\n        case !isValidFunction || isValidFunction && isValidFunction(value, name):\n          return value;\n        default:\n          throw new Error(name + ' value is invalid');\n      }\n    }\n    /**\n     * @private\n     * @param {string|BigNumber} value Value\n     * @returns {Hyper} XDR amount\n     */\n\n  }, {\n    key: '_toXDRAmount',\n    value: function _toXDRAmount(value) {\n      var amount = new _bignumber2.default(value).mul(ONE);\n      return _jsXdr.Hyper.fromString(amount.toString());\n    }\n\n    /**\n     * @private\n     * @param {string|BigNumber} value XDR amount\n     * @returns {BigNumber} Number\n     */\n\n  }, {\n    key: '_fromXDRAmount',\n    value: function _fromXDRAmount(value) {\n      return new _bignumber2.default(value).div(ONE).toFixed(7);\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {BigNumber} Big string\n     */\n\n  }, {\n    key: '_fromXDRPrice',\n    value: function _fromXDRPrice(price) {\n      var n = new _bignumber2.default(price.n());\n      return n.div(new _bignumber2.default(price.d())).toString();\n    }\n\n    /**\n     * @private\n     * @param {object} price Price object\n     * @param {function} price.n numerator function that returns a value\n     * @param {function} price.d denominator function that returns a value\n     * @returns {object} XDR price object\n     */\n\n  }, {\n    key: '_toXDRPrice',\n    value: function _toXDRPrice(price) {\n      var xdrObject = void 0;\n      if (price.n && price.d) {\n        xdrObject = new _stellarXdr_generated2.default.Price(price);\n      } else {\n        price = new _bignumber2.default(price);\n        var approx = (0, _continued_fraction.best_r)(price);\n        xdrObject = new _stellarXdr_generated2.default.Price({\n          n: parseInt(approx[0], 10),\n          d: parseInt(approx[1], 10)\n        });\n      }\n\n      if (xdrObject.n() < 0 || xdrObject.d() < 0) {\n        throw new Error('price must be positive');\n      }\n\n      return xdrObject;\n    }\n  }]);\n\n  return Operation;\n}();\n\n// Attach all imported operations as static methods on the Operation class\n\n\nOperation.accountMerge = ops.accountMerge;\nOperation.allowTrust = ops.allowTrust;\nOperation.bumpSequence = ops.bumpSequence;\nOperation.changeTrust = ops.changeTrust;\nOperation.createAccount = ops.createAccount;\nOperation.createPassiveSellOffer = ops.createPassiveSellOffer;\nOperation.inflation = ops.inflation;\nOperation.manageData = ops.manageData;\nOperation.manageSellOffer = ops.manageSellOffer;\nOperation.manageBuyOffer = ops.manageBuyOffer;\nOperation.pathPayment = ops.pathPayment;\nOperation.payment = ops.payment;\nOperation.setOptions = ops.setOptions;\n\n// deprecated, to be removed after 1.0.1\nOperation.manageOffer = ops.manageOffer;\nOperation.createPassiveOffer = ops.createPassiveOffer;"]},"metadata":{},"sourceType":"script"}