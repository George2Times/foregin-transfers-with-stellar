{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Network = exports.Networks = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _hashing = require('./hashing');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Contains passphrases for common networks:\n * * `Networks.PUBLIC`: `Public Global Stellar Network ; September 2015`\n * * `Networks.TESTNET`: `Test SDF Network ; September 2015`\n * @type {{PUBLIC: string, TESTNET: string}}\n */\n\n\nvar Networks = exports.Networks = {\n  PUBLIC: 'Public Global Stellar Network ; September 2015',\n  TESTNET: 'Test SDF Network ; September 2015'\n};\nvar _current = null;\n/**\n * The Network class provides helper methods to get the passphrase or id for different\n * stellar networks.  It also provides the {@link Network.current} class method that returns the network\n * that will be used by this process for the purposes of generating signatures.\n *\n * You should select network your app will use before adding the first signature. You can use the `use`,\n * `usePublicNetwork` and `useTestNetwork` helper methods.\n *\n * Creates a new `Network` object.\n * @constructor\n * @param {string} networkPassphrase Network passphrase\n * @deprecated\n */\n\nvar Network = exports.Network = function () {\n  function Network(networkPassphrase) {\n    _classCallCheck(this, Network);\n\n    this._networkPassphrase = networkPassphrase;\n  }\n  /**\n   * Use Stellar Public Network\n   * @returns {void}\n   */\n\n\n  _createClass(Network, [{\n    key: 'networkPassphrase',\n\n    /**\n     * @returns {string} Network passphrase\n     */\n    value: function networkPassphrase() {\n      return this._networkPassphrase;\n    }\n    /**\n     * @returns {string} Network ID (SHA-256 hash of network passphrase)\n     */\n\n  }, {\n    key: 'networkId',\n    value: function networkId() {\n      return (0, _hashing.hash)(this.networkPassphrase());\n    }\n  }], [{\n    key: 'usePublicNetwork',\n    value: function usePublicNetwork() {\n      this.use(new Network(Networks.PUBLIC));\n    }\n    /**\n     * Use test network.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'useTestNetwork',\n    value: function useTestNetwork() {\n      this.use(new Network(Networks.TESTNET));\n    }\n    /**\n     * Use network defined by Network object.\n     * @param {Network} network Network to use\n     * @returns {void}\n     */\n\n  }, {\n    key: 'use',\n    value: function use(network) {\n      console.warn('Global class `Network` is deprecated. Please pass explicit argument instead, e.g. `new Transaction(envelope, Networks.PUBLIC)` (see https://git.io/fj9fG for more info).');\n      _current = network;\n    }\n    /**\n     * @returns {Network} Currently selected network\n     */\n\n  }, {\n    key: 'current',\n    value: function current() {\n      return _current;\n    }\n  }]);\n\n  return Network;\n}();","map":{"version":3,"sources":["/home/azureuser/foregin-transfers-with-stellar/infrastructure/pageB/node_modules/stellar-base/lib/network.js"],"names":["Object","defineProperty","exports","value","Network","Networks","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_hashing","require","_classCallCheck","instance","TypeError","PUBLIC","TESTNET","_current","networkPassphrase","_networkPassphrase","networkId","hash","usePublicNetwork","use","useTestNetwork","network","console","warn","current"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Network = exports.Networks = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _hashing = require('./hashing');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Contains passphrases for common networks:\n * * `Networks.PUBLIC`: `Public Global Stellar Network ; September 2015`\n * * `Networks.TESTNET`: `Test SDF Network ; September 2015`\n * @type {{PUBLIC: string, TESTNET: string}}\n */\nvar Networks = exports.Networks = {\n  PUBLIC: 'Public Global Stellar Network ; September 2015',\n  TESTNET: 'Test SDF Network ; September 2015'\n};\n\nvar _current = null;\n\n/**\n * The Network class provides helper methods to get the passphrase or id for different\n * stellar networks.  It also provides the {@link Network.current} class method that returns the network\n * that will be used by this process for the purposes of generating signatures.\n *\n * You should select network your app will use before adding the first signature. You can use the `use`,\n * `usePublicNetwork` and `useTestNetwork` helper methods.\n *\n * Creates a new `Network` object.\n * @constructor\n * @param {string} networkPassphrase Network passphrase\n * @deprecated\n */\n\nvar Network = exports.Network = function () {\n  function Network(networkPassphrase) {\n    _classCallCheck(this, Network);\n\n    this._networkPassphrase = networkPassphrase;\n  }\n\n  /**\n   * Use Stellar Public Network\n   * @returns {void}\n   */\n\n\n  _createClass(Network, [{\n    key: 'networkPassphrase',\n\n\n    /**\n     * @returns {string} Network passphrase\n     */\n    value: function networkPassphrase() {\n      return this._networkPassphrase;\n    }\n\n    /**\n     * @returns {string} Network ID (SHA-256 hash of network passphrase)\n     */\n\n  }, {\n    key: 'networkId',\n    value: function networkId() {\n      return (0, _hashing.hash)(this.networkPassphrase());\n    }\n  }], [{\n    key: 'usePublicNetwork',\n    value: function usePublicNetwork() {\n      this.use(new Network(Networks.PUBLIC));\n    }\n\n    /**\n     * Use test network.\n     * @returns {void}\n     */\n\n  }, {\n    key: 'useTestNetwork',\n    value: function useTestNetwork() {\n      this.use(new Network(Networks.TESTNET));\n    }\n\n    /**\n     * Use network defined by Network object.\n     * @param {Network} network Network to use\n     * @returns {void}\n     */\n\n  }, {\n    key: 'use',\n    value: function use(network) {\n      console.warn('Global class `Network` is deprecated. Please pass explicit argument instead, e.g. `new Transaction(envelope, Networks.PUBLIC)` (see https://git.io/fj9fG for more info).');\n\n      _current = network;\n    }\n\n    /**\n     * @returns {Network} Currently selected network\n     */\n\n  }, {\n    key: 'current',\n    value: function current() {\n      return _current;\n    }\n  }]);\n\n  return Network;\n}();"]},"metadata":{},"sourceType":"script"}