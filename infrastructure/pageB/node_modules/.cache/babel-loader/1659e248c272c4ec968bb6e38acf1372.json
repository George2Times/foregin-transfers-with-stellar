{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Keypair = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _tweetnacl = require('tweetnacl');\n\nvar _tweetnacl2 = _interopRequireDefault(_tweetnacl);\n\nvar _network = require('./network');\n\nvar _signing = require('./signing');\n\nvar _base = require('./base58');\n\nvar base58 = _interopRequireWildcard(_base);\n\nvar _strkey = require('./strkey');\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _hashing = require('./hashing');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * `Keypair` represents public (and secret) keys of the account.\n *\n * Currently `Keypair` only supports ed25519 but in a future this class can be abstraction layer for other\n * public-key signature systems.\n *\n * Use more convenient methods to create `Keypair` object:\n * * `{@link Keypair.fromPublicKey}`\n * * `{@link Keypair.fromSecret}`\n * * `{@link Keypair.random}`\n *\n * @constructor\n * @param {object} keys At least one of keys must be provided.\n * @param {string} keys.type Public-key signature system name. (currently only `ed25519` keys are supported)\n * @param {Buffer} [keys.publicKey] Raw public key\n * @param {Buffer} [keys.secretKey] Raw secret key (32-byte secret seed in ed25519`)\n */\n\n\nvar Keypair = exports.Keypair = function () {\n  function Keypair(keys) {\n    _classCallCheck(this, Keypair);\n\n    if (keys.type !== 'ed25519') {\n      throw new Error('Invalid keys type');\n    }\n\n    this.type = keys.type;\n\n    if (keys.secretKey) {\n      keys.secretKey = Buffer.from(keys.secretKey);\n\n      if (keys.secretKey.length !== 32) {\n        throw new Error('secretKey length is invalid');\n      }\n\n      this._secretSeed = keys.secretKey;\n      this._publicKey = (0, _signing.generate)(keys.secretKey);\n      this._secretKey = Buffer.concat([keys.secretKey, this._publicKey]);\n\n      if (keys.publicKey && !this._publicKey.equals(Buffer.from(keys.publicKey))) {\n        throw new Error('secretKey does not match publicKey');\n      }\n    } else {\n      this._publicKey = Buffer.from(keys.publicKey);\n\n      if (this._publicKey.length !== 32) {\n        throw new Error('publicKey length is invalid');\n      }\n    }\n  }\n  /**\n   * Creates a new `Keypair` instance from secret. This can either be secret key or secret seed depending\n   * on underlying public-key signature system. Currently `Keypair` only supports ed25519.\n   * @param {string} secret secret key (ex. `SDAKFNYEIAORZKKCYRILFQKLLOCNPL5SWJ3YY5NM3ZH6GJSZGXHZEPQS`)\n   * @returns {Keypair}\n   */\n\n\n  _createClass(Keypair, [{\n    key: 'xdrAccountId',\n    value: function xdrAccountId() {\n      return new _stellarXdr_generated2.default.AccountId.publicKeyTypeEd25519(this._publicKey);\n    }\n  }, {\n    key: 'xdrPublicKey',\n    value: function xdrPublicKey() {\n      return new _stellarXdr_generated2.default.PublicKey.publicKeyTypeEd25519(this._publicKey);\n    }\n    /**\n     * Returns raw public key\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'rawPublicKey',\n    value: function rawPublicKey() {\n      return this._publicKey;\n    }\n  }, {\n    key: 'signatureHint',\n    value: function signatureHint() {\n      var a = this.xdrAccountId().toXDR();\n      return a.slice(a.length - 4);\n    }\n    /**\n     * Returns public key associated with this `Keypair` object.\n     * @returns {string}\n     */\n\n  }, {\n    key: 'publicKey',\n    value: function publicKey() {\n      return _strkey.StrKey.encodeEd25519PublicKey(this._publicKey);\n    }\n    /**\n     * Returns secret key associated with this `Keypair` object\n     * @returns {string}\n     */\n\n  }, {\n    key: 'secret',\n    value: function secret() {\n      if (!this._secretSeed) {\n        throw new Error('no secret key available');\n      }\n\n      if (this.type === 'ed25519') {\n        return _strkey.StrKey.encodeEd25519SecretSeed(this._secretSeed);\n      }\n\n      throw new Error('Invalid Keypair type');\n    }\n    /**\n     * Returns raw secret key.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'rawSecretKey',\n    value: function rawSecretKey() {\n      return this._secretSeed;\n    }\n    /**\n     * Returns `true` if this `Keypair` object contains secret key and can sign.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'canSign',\n    value: function canSign() {\n      return !!this._secretKey;\n    }\n    /**\n     * Signs data.\n     * @param {Buffer} data Data to sign\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'sign',\n    value: function sign(data) {\n      if (!this.canSign()) {\n        throw new Error('cannot sign: no secret key available');\n      }\n\n      return (0, _signing.sign)(data, this._secretKey);\n    }\n    /**\n     * Verifies if `signature` for `data` is valid.\n     * @param {Buffer} data Signed data\n     * @param {Buffer} signature Signature\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'verify',\n    value: function verify(data, signature) {\n      return (0, _signing.verify)(data, signature, this._publicKey);\n    }\n  }, {\n    key: 'signDecorated',\n    value: function signDecorated(data) {\n      var signature = this.sign(data);\n      var hint = this.signatureHint();\n      return new _stellarXdr_generated2.default.DecoratedSignature({\n        hint: hint,\n        signature: signature\n      });\n    }\n  }], [{\n    key: 'fromSecret',\n    value: function fromSecret(secret) {\n      var rawSecret = _strkey.StrKey.decodeEd25519SecretSeed(secret);\n\n      return this.fromRawEd25519Seed(rawSecret);\n    }\n    /**\n     * Base58 address encoding is **DEPRECATED**! Use this method only for transition to strkey encoding.\n     * @param {string} seed Base58 secret seed\n     * @deprecated Use {@link Keypair.fromSecret}\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'fromBase58Seed',\n    value: function fromBase58Seed(seed) {\n      var rawSeed = base58.decodeBase58Check('seed', seed);\n      return this.fromRawEd25519Seed(rawSeed);\n    }\n    /**\n     * Creates a new `Keypair` object from ed25519 secret key seed raw bytes.\n     *\n     * @param {Buffer} rawSeed Raw 32-byte ed25519 secret key seed\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'fromRawEd25519Seed',\n    value: function fromRawEd25519Seed(rawSeed) {\n      return new this({\n        type: 'ed25519',\n        secretKey: rawSeed\n      });\n    }\n    /**\n     * Returns `Keypair` object representing network master key.\n     * @param {string} [networkPassphrase] passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'master',\n    value: function master(networkPassphrase) {\n      // Deprecation warning. TODO: remove optionality with next major release.\n      if (!networkPassphrase) {\n        console.warn('Global `Network.current()` is deprecated. Please pass explicit argument instead, e.g. `Keypair.master(Networks.PUBLIC)` (see https://git.io/fj9fG for more info).');\n\n        if (_network.Network.current() === null) {\n          throw new Error('No network selected. Please pass a network argument, e.g. `Keypair.master(Networks.PUBLIC)`.');\n        }\n\n        networkPassphrase = _network.Network.current().networkPassphrase();\n      }\n\n      return this.fromRawEd25519Seed((0, _hashing.hash)(networkPassphrase));\n    }\n    /**\n     * Creates a new `Keypair` object from public key.\n     * @param {string} publicKey public key (ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`)\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'fromPublicKey',\n    value: function fromPublicKey(publicKey) {\n      publicKey = _strkey.StrKey.decodeEd25519PublicKey(publicKey);\n\n      if (publicKey.length !== 32) {\n        throw new Error('Invalid Stellar public key');\n      }\n\n      return new this({\n        type: 'ed25519',\n        publicKey: publicKey\n      });\n    }\n    /**\n     * Create a random `Keypair` object.\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'random',\n    value: function random() {\n      var secret = _tweetnacl2.default.randomBytes(32);\n\n      return this.fromRawEd25519Seed(secret);\n    }\n  }]);\n\n  return Keypair;\n}();","map":{"version":3,"sources":["/home/azureuser/foregin-transfers-with-stellar/infrastructure/pageB/node_modules/stellar-base/lib/keypair.js"],"names":["Object","defineProperty","exports","value","Keypair","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_tweetnacl","require","_tweetnacl2","_interopRequireDefault","_network","_signing","_base","base58","_interopRequireWildcard","_strkey","_stellarXdr_generated","_stellarXdr_generated2","_hashing","obj","__esModule","newObj","hasOwnProperty","call","default","_classCallCheck","instance","TypeError","keys","type","Error","secretKey","Buffer","from","_secretSeed","_publicKey","generate","_secretKey","concat","publicKey","equals","xdrAccountId","AccountId","publicKeyTypeEd25519","xdrPublicKey","PublicKey","rawPublicKey","signatureHint","a","toXDR","slice","StrKey","encodeEd25519PublicKey","secret","encodeEd25519SecretSeed","rawSecretKey","canSign","sign","data","verify","signature","signDecorated","hint","DecoratedSignature","fromSecret","rawSecret","decodeEd25519SecretSeed","fromRawEd25519Seed","fromBase58Seed","seed","rawSeed","decodeBase58Check","master","networkPassphrase","console","warn","Network","current","hash","fromPublicKey","decodeEd25519PublicKey","random","randomBytes"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Keypair = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tweetnacl = require('tweetnacl');\n\nvar _tweetnacl2 = _interopRequireDefault(_tweetnacl);\n\nvar _network = require('./network');\n\nvar _signing = require('./signing');\n\nvar _base = require('./base58');\n\nvar base58 = _interopRequireWildcard(_base);\n\nvar _strkey = require('./strkey');\n\nvar _stellarXdr_generated = require('./generated/stellar-xdr_generated');\n\nvar _stellarXdr_generated2 = _interopRequireDefault(_stellarXdr_generated);\n\nvar _hashing = require('./hashing');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * `Keypair` represents public (and secret) keys of the account.\n *\n * Currently `Keypair` only supports ed25519 but in a future this class can be abstraction layer for other\n * public-key signature systems.\n *\n * Use more convenient methods to create `Keypair` object:\n * * `{@link Keypair.fromPublicKey}`\n * * `{@link Keypair.fromSecret}`\n * * `{@link Keypair.random}`\n *\n * @constructor\n * @param {object} keys At least one of keys must be provided.\n * @param {string} keys.type Public-key signature system name. (currently only `ed25519` keys are supported)\n * @param {Buffer} [keys.publicKey] Raw public key\n * @param {Buffer} [keys.secretKey] Raw secret key (32-byte secret seed in ed25519`)\n */\nvar Keypair = exports.Keypair = function () {\n  function Keypair(keys) {\n    _classCallCheck(this, Keypair);\n\n    if (keys.type !== 'ed25519') {\n      throw new Error('Invalid keys type');\n    }\n\n    this.type = keys.type;\n\n    if (keys.secretKey) {\n      keys.secretKey = Buffer.from(keys.secretKey);\n\n      if (keys.secretKey.length !== 32) {\n        throw new Error('secretKey length is invalid');\n      }\n\n      this._secretSeed = keys.secretKey;\n      this._publicKey = (0, _signing.generate)(keys.secretKey);\n      this._secretKey = Buffer.concat([keys.secretKey, this._publicKey]);\n\n      if (keys.publicKey && !this._publicKey.equals(Buffer.from(keys.publicKey))) {\n        throw new Error('secretKey does not match publicKey');\n      }\n    } else {\n      this._publicKey = Buffer.from(keys.publicKey);\n\n      if (this._publicKey.length !== 32) {\n        throw new Error('publicKey length is invalid');\n      }\n    }\n  }\n\n  /**\n   * Creates a new `Keypair` instance from secret. This can either be secret key or secret seed depending\n   * on underlying public-key signature system. Currently `Keypair` only supports ed25519.\n   * @param {string} secret secret key (ex. `SDAKFNYEIAORZKKCYRILFQKLLOCNPL5SWJ3YY5NM3ZH6GJSZGXHZEPQS`)\n   * @returns {Keypair}\n   */\n\n\n  _createClass(Keypair, [{\n    key: 'xdrAccountId',\n    value: function xdrAccountId() {\n      return new _stellarXdr_generated2.default.AccountId.publicKeyTypeEd25519(this._publicKey);\n    }\n  }, {\n    key: 'xdrPublicKey',\n    value: function xdrPublicKey() {\n      return new _stellarXdr_generated2.default.PublicKey.publicKeyTypeEd25519(this._publicKey);\n    }\n\n    /**\n     * Returns raw public key\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'rawPublicKey',\n    value: function rawPublicKey() {\n      return this._publicKey;\n    }\n  }, {\n    key: 'signatureHint',\n    value: function signatureHint() {\n      var a = this.xdrAccountId().toXDR();\n\n      return a.slice(a.length - 4);\n    }\n\n    /**\n     * Returns public key associated with this `Keypair` object.\n     * @returns {string}\n     */\n\n  }, {\n    key: 'publicKey',\n    value: function publicKey() {\n      return _strkey.StrKey.encodeEd25519PublicKey(this._publicKey);\n    }\n\n    /**\n     * Returns secret key associated with this `Keypair` object\n     * @returns {string}\n     */\n\n  }, {\n    key: 'secret',\n    value: function secret() {\n      if (!this._secretSeed) {\n        throw new Error('no secret key available');\n      }\n\n      if (this.type === 'ed25519') {\n        return _strkey.StrKey.encodeEd25519SecretSeed(this._secretSeed);\n      }\n\n      throw new Error('Invalid Keypair type');\n    }\n\n    /**\n     * Returns raw secret key.\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'rawSecretKey',\n    value: function rawSecretKey() {\n      return this._secretSeed;\n    }\n\n    /**\n     * Returns `true` if this `Keypair` object contains secret key and can sign.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'canSign',\n    value: function canSign() {\n      return !!this._secretKey;\n    }\n\n    /**\n     * Signs data.\n     * @param {Buffer} data Data to sign\n     * @returns {Buffer}\n     */\n\n  }, {\n    key: 'sign',\n    value: function sign(data) {\n      if (!this.canSign()) {\n        throw new Error('cannot sign: no secret key available');\n      }\n\n      return (0, _signing.sign)(data, this._secretKey);\n    }\n\n    /**\n     * Verifies if `signature` for `data` is valid.\n     * @param {Buffer} data Signed data\n     * @param {Buffer} signature Signature\n     * @returns {boolean}\n     */\n\n  }, {\n    key: 'verify',\n    value: function verify(data, signature) {\n      return (0, _signing.verify)(data, signature, this._publicKey);\n    }\n  }, {\n    key: 'signDecorated',\n    value: function signDecorated(data) {\n      var signature = this.sign(data);\n      var hint = this.signatureHint();\n\n      return new _stellarXdr_generated2.default.DecoratedSignature({ hint: hint, signature: signature });\n    }\n  }], [{\n    key: 'fromSecret',\n    value: function fromSecret(secret) {\n      var rawSecret = _strkey.StrKey.decodeEd25519SecretSeed(secret);\n      return this.fromRawEd25519Seed(rawSecret);\n    }\n\n    /**\n     * Base58 address encoding is **DEPRECATED**! Use this method only for transition to strkey encoding.\n     * @param {string} seed Base58 secret seed\n     * @deprecated Use {@link Keypair.fromSecret}\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'fromBase58Seed',\n    value: function fromBase58Seed(seed) {\n      var rawSeed = base58.decodeBase58Check('seed', seed);\n      return this.fromRawEd25519Seed(rawSeed);\n    }\n\n    /**\n     * Creates a new `Keypair` object from ed25519 secret key seed raw bytes.\n     *\n     * @param {Buffer} rawSeed Raw 32-byte ed25519 secret key seed\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'fromRawEd25519Seed',\n    value: function fromRawEd25519Seed(rawSeed) {\n      return new this({ type: 'ed25519', secretKey: rawSeed });\n    }\n\n    /**\n     * Returns `Keypair` object representing network master key.\n     * @param {string} [networkPassphrase] passphrase of the target stellar network (e.g. \"Public Global Stellar Network ; September 2015\").\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'master',\n    value: function master(networkPassphrase) {\n      // Deprecation warning. TODO: remove optionality with next major release.\n      if (!networkPassphrase) {\n        console.warn('Global `Network.current()` is deprecated. Please pass explicit argument instead, e.g. `Keypair.master(Networks.PUBLIC)` (see https://git.io/fj9fG for more info).');\n        if (_network.Network.current() === null) {\n          throw new Error('No network selected. Please pass a network argument, e.g. `Keypair.master(Networks.PUBLIC)`.');\n        }\n        networkPassphrase = _network.Network.current().networkPassphrase();\n      }\n      return this.fromRawEd25519Seed((0, _hashing.hash)(networkPassphrase));\n    }\n\n    /**\n     * Creates a new `Keypair` object from public key.\n     * @param {string} publicKey public key (ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`)\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'fromPublicKey',\n    value: function fromPublicKey(publicKey) {\n      publicKey = _strkey.StrKey.decodeEd25519PublicKey(publicKey);\n      if (publicKey.length !== 32) {\n        throw new Error('Invalid Stellar public key');\n      }\n      return new this({ type: 'ed25519', publicKey: publicKey });\n    }\n\n    /**\n     * Create a random `Keypair` object.\n     * @returns {Keypair}\n     */\n\n  }, {\n    key: 'random',\n    value: function random() {\n      var secret = _tweetnacl2.default.randomBytes(32);\n      return this.fromRawEd25519Seed(secret);\n    }\n  }]);\n\n  return Keypair;\n}();"]},"metadata":{},"sourceType":"script"}